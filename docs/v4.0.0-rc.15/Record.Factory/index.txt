1:"$Sreact.fragment"
2:I[9287,[],""]
3:I[4235,[],""]
4:I[9534,["534","static/chunks/534-36991723363293d6.js","853","static/chunks/app/docs/%5Bversion%5D/page-1471691b270351d4.js"],""]
7:I[3621,[],"OutletBoundary"]
a:I[3621,[],"ViewportBoundary"]
c:I[3621,[],"MetadataBoundary"]
e:I[7890,[],""]
:HL["/_next/static/css/a4b7556e45b5277f.css","style"]
0:{"P":null,"b":"yCwv7RoYnRLv4jABeQ0JO","p":"","c":["","docs","v4.0.0-rc.15","Record.Factory",""],"i":false,"f":[[["",{"children":["docs",{"children":[["version","v4.0.0-rc.15","d"],{"children":[["type","Record.Factory","d"],{"children":["__PAGE__",{}]}]}]}]},"$undefined","$undefined",true],["",["$","$1","c",{"children":[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/a4b7556e45b5277f.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}]],["$","html",null,{"lang":"en","children":["$","body",null,{"children":["$","$L2",null,{"parallelRouterKey":"children","error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L3",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":[["$","div",null,{"className":"pageBody","children":[["$","h2",null,{"children":"Not Found"}],["$","p",null,{"children":"Could not find requested resource"}],["$","$L4",null,{"href":"/","children":"Return Home"}]]}],[]],"forbidden":"$undefined","unauthorized":"$undefined"}]}]}]]}],{"children":["docs",["$","$1","c",{"children":[null,["$","$L2",null,{"parallelRouterKey":"children","error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L3",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","forbidden":"$undefined","unauthorized":"$undefined"}]]}],{"children":[["version","v4.0.0-rc.15","d"],["$","$1","c",{"children":[null,"$L5"]}],{"children":[["type","Record.Factory","d"],["$","$1","c",{"children":[null,["$","$L2",null,{"parallelRouterKey":"children","error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L3",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","forbidden":"$undefined","unauthorized":"$undefined"}]]}],{"children":["__PAGE__",["$","$1","c",{"children":["$L6","$undefined",null,["$","$L7",null,{"children":["$L8","$L9",null]}]]}],{},null,false]},null,false]},null,false]},null,false]},null,false],["$","$1","h",{"children":[null,["$","$1","4thQd46AISYs44b-_fli2",{"children":[["$","$La",null,{"children":"$Lb"}],null]}],["$","$Lc",null,{"children":"$Ld"}]]}],false]],"m":"$undefined","G":["$e","$undefined"],"s":false,"S":true}
f:I[4366,["534","static/chunks/534-36991723363293d6.js","479","static/chunks/479-9d174c784fc467f1.js","502","static/chunks/app/docs/%5Bversion%5D/layout-3765e0e31eea4221.js"],"ImmutableConsole"]
10:I[7776,["534","static/chunks/534-36991723363293d6.js","479","static/chunks/479-9d174c784fc467f1.js","502","static/chunks/app/docs/%5Bversion%5D/layout-3765e0e31eea4221.js"],"HeaderLogoLink"]
11:I[7776,["534","static/chunks/534-36991723363293d6.js","479","static/chunks/479-9d174c784fc467f1.js","502","static/chunks/app/docs/%5Bversion%5D/layout-3765e0e31eea4221.js"],"HeaderLinks"]
12:I[6231,["534","static/chunks/534-36991723363293d6.js","650","static/chunks/app/docs/%5Bversion%5D/%5Btype%5D/page-e70284a08a775376.js"],"TypeDocumentation"]
5:["$","div",null,{"children":[["$","$Lf",null,{"version":"v4.0.0-rc.15"}],["$","div",null,{"className":"header","children":["$","div",null,{"className":"miniHeader","children":["$","div",null,{"className":"miniHeaderContents","children":[["$","$L10",null,{}],["$","$L11",null,{"versions":["v4.0.0-rc.15","v3.8.2","latest@main"],"currentVersion":"v4.0.0-rc.15"}]]}]}]}],["$","div",null,{"className":"pageBody","children":["$","div",null,{"className":"contents","children":["$","$L2",null,{"parallelRouterKey":"children","error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L3",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","forbidden":"$undefined","unauthorized":"$undefined"}]}]}]]}]
13:T1b6c,<!-- runkit:activate
     { "preamble": "const { Record } = require('immutable')" }
-->
<code class="codeBlock"><span class="token comment">// makePerson is a Record Factory function</span>
<span class="token keyword">const</span> makePerson <span class="token operator">=</span> <span class="token function">Record</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token primitive">null</span><span class="token punctuation">,</span> <span class="token literal-property property">favoriteColor</span><span class="token operator">:</span> <span class="token string">'unknown'</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// alan is a Record instance</span>
<span class="token keyword">const</span> alan <span class="token operator">=</span> <span class="token function">makePerson</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'Alan'</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><a class="try-it" data-options="%7B%22preamble%22%3A%22const%20%7B%20Record%20%7D%20%3D%20require%28%27immutable%27%29%22%7D" onClick="runIt(this,'v4.0.0-rc.15')">run it</a></code><p>Note that Record Factories return <code><span class="token qualifier">Record</span><span class="token operator">&lt;</span>TProps<span class="token operator">></span> <span class="token operator">&amp;</span> <span class="token qualifier">Readonly</span><span class="token operator">&lt;</span>TProps<span class="token operator">></span></code>,
this allows use of both the Record instance API, and direct property
access on the resulting instances:</p>
<!-- runkit:activate
     { "preamble": "const { Record } = require('immutable');const makePerson = Record({ name: null, favoriteColor: 'unknown' });const alan = makePerson({ name: 'Alan' });" }
-->
<code class="codeBlock"><span class="token comment">// Use the Record API</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Record API: '</span> <span class="token operator">+</span> alan<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'name'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token comment">// Or direct property access (Readonly)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'property access: '</span> <span class="token operator">+</span> alan<span class="token punctuation">.</span>name<span class="token punctuation">)</span><a class="try-it" data-options="%7B%22preamble%22%3A%22const%20%7B%20Record%20%7D%20%3D%20require%28%27immutable%27%29%3Bconst%20makePerson%20%3D%20Record%28%7B%20name%3A%20null%2C%20favoriteColor%3A%20%27unknown%27%20%7D%29%3Bconst%20alan%20%3D%20makePerson%28%7B%20name%3A%20%27Alan%27%20%7D%29%3B%22%7D" onClick="runIt(this,'v4.0.0-rc.15')">run it</a></code><p><strong>Flow Typing Records:</strong></p>
<p>Use the <code><span class="token qualifier">Record</span><span class="token qualifier">Factory</span><span class="token operator">&lt;</span>TProps<span class="token operator">></span></code> Flow type to get high quality type checking of
Records:</p>
<code class="codeBlock"><span class="token keyword">import</span> type <span class="token punctuation">{</span> <span class="token qualifier">Record</span><span class="token qualifier">Factory</span><span class="token punctuation">,</span> <span class="token qualifier">Record</span><span class="token qualifier">Of</span> <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'immutable'</span><span class="token punctuation">;</span>

<span class="token comment">// Use RecordFactory&lt;TProps> for defining new Record factory functions.</span>
type <span class="token qualifier">Person</span><span class="token qualifier">Props</span> <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token operator">?</span>string<span class="token punctuation">,</span> <span class="token literal-property property">favoriteColor</span><span class="token operator">:</span> string <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token literal-property property">makePerson</span><span class="token operator">:</span> <span class="token qualifier">Record</span><span class="token qualifier">Factory</span><span class="token operator">&lt;</span><span class="token qualifier">Person</span><span class="token qualifier">Props</span><span class="token operator">></span> <span class="token operator">=</span> <span class="token function">Record</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token primitive">null</span><span class="token punctuation">,</span> <span class="token literal-property property">favoriteColor</span><span class="token operator">:</span> <span class="token string">'unknown'</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// Use RecordOf&lt;T> for defining new instances of that Record.</span>
type <span class="token qualifier">Person</span> <span class="token operator">=</span> <span class="token qualifier">Record</span><span class="token qualifier">Of</span><span class="token operator">&lt;</span><span class="token qualifier">Person</span><span class="token qualifier">Props</span><span class="token operator">></span><span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token literal-property property">alan</span><span class="token operator">:</span> <span class="token qualifier">Person</span> <span class="token operator">=</span> <span class="token function">makePerson</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'Alan'</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code>6:["$","$L12",null,{"def":{"qualifiedName":"Record.Factory","doc":{"synopsis":"<p>A Record.Factory is created by the <code><a href=\"/docs/v4.0.0-rc.15/Record\">Record()</a></code> function. Record instances\nare created by passing it some of the accepted values for that Record\ntype:</p>\n","description":"$13","notes":[]},"interface":{"members":{"displayName":{"name":"displayName","label":"displayName","id":"displayName","line":2490,"doc":{"synopsis":"<p>The name provided to <code><span class=\"token function\">Record</span><span class=\"token punctuation\">(</span>values<span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">)</span></code> can be accessed with\n<code><a href=\"/docs/v4.0.0-rc.15/Record.Factory#displayName\">displayName</a></code>.</p>\n","description":"","notes":[]},"type":{"k":7},"url":"/docs/v4.0.0-rc.15/Record.Factory#displayName"}},"line":2479,"typeParams":["TProps"]},"call":{"name":"Record.Factory","label":"Record.Factory()","id":"Record.Factory()","signatures":[{"line":2493,"typeParams":["TProps"],"params":[{"name":"values","type":{"k":13,"types":[{"k":12,"name":"Partial","args":[{"k":11,"param":"TProps"}]},{"k":12,"name":"Iterable","args":[{"k":15,"types":[{"k":7},{"k":2}]}]}]},"optional":true}],"type":{"k":14,"types":[{"k":12,"name":"Record","args":[{"k":11,"param":"TProps"}]},{"k":12,"name":"Readonly","args":[{"k":11,"param":"TProps"}]}]}}],"url":"/docs/v4.0.0-rc.15/Record.Factory#Record.Factory()"},"label":"Record.Factory","url":"/docs/v4.0.0-rc.15/Record.Factory"},"sidebarLinks":[{"label":"List","url":"/docs/v4.0.0-rc.15/List"},{"label":"Map","url":"/docs/v4.0.0-rc.15/Map"},{"label":"OrderedMap","url":"/docs/v4.0.0-rc.15/OrderedMap"},{"label":"Set","url":"/docs/v4.0.0-rc.15/Set"},{"label":"OrderedSet","url":"/docs/v4.0.0-rc.15/OrderedSet"},{"label":"Stack","url":"/docs/v4.0.0-rc.15/Stack"},{"label":"Range()","url":"/docs/v4.0.0-rc.15/Range()"},{"label":"Repeat()","url":"/docs/v4.0.0-rc.15/Repeat()"},{"label":"Record","url":"/docs/v4.0.0-rc.15/Record"},{"label":"Record.Factory","url":"/docs/v4.0.0-rc.15/Record.Factory"},{"label":"Seq","url":"/docs/v4.0.0-rc.15/Seq"},{"label":"Seq.Keyed","url":"/docs/v4.0.0-rc.15/Seq.Keyed"},{"label":"Seq.Indexed","url":"/docs/v4.0.0-rc.15/Seq.Indexed"},{"label":"Seq.Set","url":"/docs/v4.0.0-rc.15/Seq.Set"},{"label":"Collection","url":"/docs/v4.0.0-rc.15/Collection"},{"label":"Collection.Keyed","url":"/docs/v4.0.0-rc.15/Collection.Keyed"},{"label":"Collection.Indexed","url":"/docs/v4.0.0-rc.15/Collection.Indexed"},{"label":"Collection.Set","url":"/docs/v4.0.0-rc.15/Collection.Set"},{"label":"ValueObject","url":"/docs/v4.0.0-rc.15/ValueObject"},{"label":"fromJS()","url":"/docs/v4.0.0-rc.15/fromJS()"},{"label":"is()","url":"/docs/v4.0.0-rc.15/is()"},{"label":"hash()","url":"/docs/v4.0.0-rc.15/hash()"},{"label":"isImmutable()","url":"/docs/v4.0.0-rc.15/isImmutable()"},{"label":"isCollection()","url":"/docs/v4.0.0-rc.15/isCollection()"},{"label":"isKeyed()","url":"/docs/v4.0.0-rc.15/isKeyed()"},{"label":"isIndexed()","url":"/docs/v4.0.0-rc.15/isIndexed()"},{"label":"isAssociative()","url":"/docs/v4.0.0-rc.15/isAssociative()"},{"label":"isOrdered()","url":"/docs/v4.0.0-rc.15/isOrdered()"},{"label":"isValueObject()","url":"/docs/v4.0.0-rc.15/isValueObject()"},{"label":"isSeq()","url":"/docs/v4.0.0-rc.15/isSeq()"},{"label":"isList()","url":"/docs/v4.0.0-rc.15/isList()"},{"label":"isMap()","url":"/docs/v4.0.0-rc.15/isMap()"},{"label":"isOrderedMap()","url":"/docs/v4.0.0-rc.15/isOrderedMap()"},{"label":"isStack()","url":"/docs/v4.0.0-rc.15/isStack()"},{"label":"isSet()","url":"/docs/v4.0.0-rc.15/isSet()"},{"label":"isOrderedSet()","url":"/docs/v4.0.0-rc.15/isOrderedSet()"},{"label":"isRecord()","url":"/docs/v4.0.0-rc.15/isRecord()"},{"label":"get()","url":"/docs/v4.0.0-rc.15/get()"},{"label":"has()","url":"/docs/v4.0.0-rc.15/has()"},{"label":"remove()","url":"/docs/v4.0.0-rc.15/remove()"},{"label":"set()","url":"/docs/v4.0.0-rc.15/set()"},{"label":"update()","url":"/docs/v4.0.0-rc.15/update()"},{"label":"getIn()","url":"/docs/v4.0.0-rc.15/getIn()"},{"label":"hasIn()","url":"/docs/v4.0.0-rc.15/hasIn()"},{"label":"removeIn()","url":"/docs/v4.0.0-rc.15/removeIn()"},{"label":"setIn()","url":"/docs/v4.0.0-rc.15/setIn()"},{"label":"updateIn()","url":"/docs/v4.0.0-rc.15/updateIn()"},{"label":"merge()","url":"/docs/v4.0.0-rc.15/merge()"},{"label":"mergeWith()","url":"/docs/v4.0.0-rc.15/mergeWith()"},{"label":"mergeDeep()","url":"/docs/v4.0.0-rc.15/mergeDeep()"},{"label":"mergeDeepWith()","url":"/docs/v4.0.0-rc.15/mergeDeepWith()"}]}]
b:[["$","meta","0",{"charSet":"utf-8"}],["$","meta","1",{"name":"viewport","content":"width=device-width, initial-scale=1"}]]
8:null
9:null
d:[["$","title","0",{"children":"Record.Factory — Immutable.js"}],["$","link","1",{"rel":"icon","href":"/favicon.png"}]]
