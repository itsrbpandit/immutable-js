1:"$Sreact.fragment"
2:I[2708,["/_next/static/chunks/6835ccf506b9e93a.js","/_next/static/chunks/0f63189634a29548.js"],"WorkerContextProvider"]
3:I[4620,["/_next/static/chunks/6835ccf506b9e93a.js","/_next/static/chunks/0f63189634a29548.js"],"default"]
4:I[81105,["/_next/static/chunks/6835ccf506b9e93a.js","/_next/static/chunks/0f63189634a29548.js"],"default"]
5:I[86240,["/_next/static/chunks/6835ccf506b9e93a.js","/_next/static/chunks/0f63189634a29548.js","/_next/static/chunks/c63eea34c69bde5e.js"],"default"]
8:I[83822,["/_next/static/chunks/6835ccf506b9e93a.js","/_next/static/chunks/0f63189634a29548.js"],"MetadataBoundary"]
a:I[83822,["/_next/static/chunks/6835ccf506b9e93a.js","/_next/static/chunks/0f63189634a29548.js"],"OutletBoundary"]
d:I[2541,["/_next/static/chunks/6835ccf506b9e93a.js","/_next/static/chunks/0f63189634a29548.js"],"AsyncMetadataOutlet"]
f:I[83822,["/_next/static/chunks/6835ccf506b9e93a.js","/_next/static/chunks/0f63189634a29548.js"],"ViewportBoundary"]
11:I[12447,["/_next/static/chunks/6835ccf506b9e93a.js","/_next/static/chunks/0f63189634a29548.js"],"default"]
:HL["/_next/static/chunks/33ac694fc08a81ed.css","style"]
0:{"P":null,"b":"JVfEyOfkHFaW1b73N5cmu","p":"","c":["","docs","v4.0.0-rc.15","fromJS()",""],"i":false,"f":[[["",{"children":["docs",{"children":[["version","v4.0.0-rc.15","d"],{"children":[["type","fromJS()","d"],{"children":["__PAGE__",{}]}]}]}]},"$undefined","$undefined",true],["",["$","$1","c",{"children":[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/chunks/33ac694fc08a81ed.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}],["$","script","script-0",{"src":"/_next/static/chunks/6835ccf506b9e93a.js","async":true,"nonce":"$undefined"}],["$","script","script-1",{"src":"/_next/static/chunks/0f63189634a29548.js","async":true,"nonce":"$undefined"}]],["$","html",null,{"lang":"en","children":["$","body",null,{"children":["$","$L2",null,{"children":["$","$L3",null,{"parallelRouterKey":"children","error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L4",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":[["$","div",null,{"className":"pageBody","children":[["$","h2",null,{"children":"Not Found"}],["$","p",null,{"children":"Could not find requested resource"}],["$","$L5",null,{"href":"/","children":"Return Home"}]]}],[]],"forbidden":"$undefined","unauthorized":"$undefined"}]}]}]}]]}],{"children":["docs",["$","$1","c",{"children":[null,["$","$L3",null,{"parallelRouterKey":"children","error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L4",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","forbidden":"$undefined","unauthorized":"$undefined"}]]}],{"children":[["version","v4.0.0-rc.15","d"],["$","$1","c",{"children":[[["$","script","script-0",{"src":"/_next/static/chunks/c03e782a91e48a61.js","async":true,"nonce":"$undefined"}]],"$L6"]}],{"children":[["type","fromJS()","d"],["$","$1","c",{"children":[null,["$","$L3",null,{"parallelRouterKey":"children","error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L4",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","forbidden":"$undefined","unauthorized":"$undefined"}]]}],{"children":["__PAGE__",["$","$1","c",{"children":["$L7",["$","$L8",null,{"children":"$L9"}],[["$","script","script-0",{"src":"/_next/static/chunks/54709ce418d2bd62.js","async":true,"nonce":"$undefined"}]],["$","$La",null,{"children":["$Lb","$Lc",["$","$Ld",null,{"promise":"$@e"}]]}]]}],{},null,false]},null,false]},null,false]},null,false]},null,false],["$","$1","h",{"children":[null,["$","$1","dT4ugkoxQlfMUdhtX_NYe",{"children":[["$","$Lf",null,{"children":"$L10"}],null]}],null]}],false]],"m":"$undefined","G":["$11","$undefined"],"s":false,"S":true}
12:"$Sreact.suspense"
13:I[2541,["/_next/static/chunks/6835ccf506b9e93a.js","/_next/static/chunks/0f63189634a29548.js"],"AsyncMetadata"]
15:I[85995,["/_next/static/chunks/6835ccf506b9e93a.js","/_next/static/chunks/0f63189634a29548.js","/_next/static/chunks/c03e782a91e48a61.js"],"ImmutableConsole"]
16:I[91842,["/_next/static/chunks/6835ccf506b9e93a.js","/_next/static/chunks/0f63189634a29548.js","/_next/static/chunks/c03e782a91e48a61.js"],"HeaderLogoLink"]
17:I[91842,["/_next/static/chunks/6835ccf506b9e93a.js","/_next/static/chunks/0f63189634a29548.js","/_next/static/chunks/c03e782a91e48a61.js"],"HeaderLinks"]
18:I[16201,["/_next/static/chunks/6835ccf506b9e93a.js","/_next/static/chunks/0f63189634a29548.js","/_next/static/chunks/c03e782a91e48a61.js","/_next/static/chunks/54709ce418d2bd62.js"],"TypeDocumentation"]
9:["$","$12",null,{"fallback":null,"children":["$","$L13",null,{"promise":"$@14"}]}]
6:["$","div",null,{"children":[["$","$L15",null,{"version":"v4.0.0-rc.15"}],["$","div",null,{"className":"header","children":["$","div",null,{"className":"miniHeader","children":["$","div",null,{"className":"miniHeaderContents","children":[["$","$L16",null,{}],["$","$L17",null,{"versions":["v5","v4.0.0-rc.15","v3.8.2"],"currentVersion":"v4.0.0-rc.15"}]]}]}]}],["$","div",null,{"className":"pageBody","children":["$","div",null,{"className":"contents","children":["$","$L3",null,{"parallelRouterKey":"children","error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L4",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","forbidden":"$undefined","unauthorized":"$undefined"}]}]}]]}]
19:T2bc3,<p><code><a href="/docs/v4.0.0-rc.15/fromJS()">fromJS</a></code> will convert Arrays and <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Indexed_collections#working_with_array-like_objects" title="Working with array-like objects">array-like objects</a> to a List, and
plain objects (without a custom prototype) to a Map. <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols#the_iterable_protocol" title="The iterable protocol">Iterable objects</a>
may be converted to List, Map, or Set.</p>
<p>If a <code><span class="t param">reviver</span></code> is optionally provided, it will be called with every
collection as a Seq (beginning with the most nested collections
and proceeding to the top-level collection itself), along with the key
referring to each collection and the parent JS object provided as <code><span class="token var">this</span></code>.
For the top level, object, the key will be <code><span class="token string">""</span></code>. This <code><span class="t param">reviver</span></code> is expected
to return a new Immutable Collection, allowing for custom conversions from
deep JS objects. Finally, a <code>path</code> is provided which is the sequence of
keys to this value from the starting value.</p>
<p><code><span class="t param">reviver</span></code> acts similarly to the <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/parse#Example.3A_Using_the_reviver_parameter" title="Using the reviver parameter">same parameter in <code><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/parse" target="_blank" rel="noopener">JSON.parse</a></code></a>.</p>
<p>If <code><span class="t param">reviver</span></code> is not provided, the default behavior will convert Objects
into Maps and Arrays into Lists like so:</p>
<!-- runkit:activate -->
<code class="codeBlock"><span class="token keyword">const</span> <span class="token punctuation">{</span> fromJS<span class="token punctuation">,</span> isKeyed <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'immutable'</span><span class="token punctuation">)</span>
<span class="token block-keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">key<span class="token punctuation">,</span> value</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token function">isKeyed</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token operator">?</span> value<span class="token punctuation">.</span><span class="token function">toMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> value<span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span></code><p>Accordingly, this example converts native JS data to OrderedMap and List:</p>
<!-- runkit:activate -->
<code class="codeBlock"><span class="token keyword">const</span> <span class="token punctuation">{</span> fromJS<span class="token punctuation">,</span> isKeyed <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'immutable'</span><span class="token punctuation">)</span>
<span class="token function">fromJS</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token literal-property property">b</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token literal-property property">c</span><span class="token operator">:</span> <span class="token number">40</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token block-keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">key<span class="token punctuation">,</span> value<span class="token punctuation">,</span> path</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">,</span> path<span class="token punctuation">)</span>
  <span class="token keyword">return</span> <span class="token function">isKeyed</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token operator">?</span> value<span class="token punctuation">.</span><span class="token function">toOrderedMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> value<span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token operator">></span> <span class="token string">"b"</span><span class="token punctuation">,</span> <span class="token punctuation">[</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">30</span> <span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span> <span class="token string">"a"</span><span class="token punctuation">,</span> <span class="token string">"b"</span> <span class="token punctuation">]</span>
<span class="token operator">></span> <span class="token string">"a"</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token literal-property property">b</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span> <span class="token string">"a"</span> <span class="token punctuation">]</span>
<span class="token operator">></span> <span class="token string">""</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token literal-property property">b</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token literal-property property">c</span><span class="token operator">:</span> <span class="token number">40</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span></code><p>Keep in mind, when using JS objects to construct Immutable Maps, that
JavaScript Object properties are always strings, even if written in a
quote-less shorthand, while Immutable Maps accept keys of any type.</p>
<!-- runkit:activate -->
<code class="codeBlock"><span class="token keyword">const</span> <span class="token punctuation">{</span> <span class="token qualifier">Map</span> <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'immutable'</span><span class="token punctuation">)</span>
<span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token number">1</span><span class="token operator">:</span> <span class="token string">"one"</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token qualifier">Object</span><span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [ "1" ]</span>
assert<span class="token punctuation">.</span><span class="token function">equal</span><span class="token punctuation">(</span>obj<span class="token punctuation">[</span><span class="token string">"1"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> obj<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// "one" === "one"</span>

<span class="token keyword">let</span> map <span class="token operator">=</span> <span class="token function">Map</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>
assert<span class="token punctuation">.</span><span class="token function">notEqual</span><span class="token punctuation">(</span>map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"1"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// "one" !== undefined</span></code><p>Property access for JavaScript Objects first converts the key to a string,
but since Immutable Map keys can be of any type the argument to <code><a href="/docs/v4.0.0-rc.15/get()">get()</a></code> is
not altered.</p>
7:["$","$L18",null,{"def":{"qualifiedName":"fromJS","call":{"name":"fromJS","label":"fromJS()","id":"fromJS()","doc":{"synopsis":"<p>Deeply converts plain JS objects and arrays to Immutable Maps and Lists.</p>\n","description":"$19","notes":[]},"signatures":[{"line":4949,"params":[{"name":"jsValue","type":{"k":2}},{"name":"reviver","type":{"k":10,"params":[{"name":"key","type":{"k":13,"types":[{"k":7},{"k":6}]}},{"name":"sequence","type":{"k":13,"types":[{"k":12,"name":"Collection.Keyed","args":[{"k":7},{"k":2}]},{"k":12,"name":"Collection.Indexed","args":[{"k":2}]}]}},{"name":"path","type":{"k":12,"name":"Array","args":[{"k":13,"types":[{"k":7},{"k":6}]}]},"optional":true}],"type":{"k":2}},"optional":true}],"type":{"k":12,"name":"Collection","args":[{"k":2},{"k":2}],"url":"/docs/v4.0.0-rc.15/Collection"}}],"url":"/docs/v4.0.0-rc.15/fromJS()"},"label":"fromJS()","url":"/docs/v4.0.0-rc.15/fromJS()"},"sidebarLinks":[{"label":"List","url":"/docs/v4.0.0-rc.15/List"},{"label":"Map","url":"/docs/v4.0.0-rc.15/Map"},{"label":"OrderedMap","url":"/docs/v4.0.0-rc.15/OrderedMap"},{"label":"Set","url":"/docs/v4.0.0-rc.15/Set"},{"label":"OrderedSet","url":"/docs/v4.0.0-rc.15/OrderedSet"},{"label":"Stack","url":"/docs/v4.0.0-rc.15/Stack"},{"label":"Range()","url":"/docs/v4.0.0-rc.15/Range()"},{"label":"Repeat()","url":"/docs/v4.0.0-rc.15/Repeat()"},{"label":"Record","url":"/docs/v4.0.0-rc.15/Record"},{"label":"Record.Factory","url":"/docs/v4.0.0-rc.15/Record.Factory"},{"label":"Seq","url":"/docs/v4.0.0-rc.15/Seq"},{"label":"Seq.Keyed","url":"/docs/v4.0.0-rc.15/Seq.Keyed"},{"label":"Seq.Indexed","url":"/docs/v4.0.0-rc.15/Seq.Indexed"},{"label":"Seq.Set","url":"/docs/v4.0.0-rc.15/Seq.Set"},{"label":"Collection","url":"/docs/v4.0.0-rc.15/Collection"},{"label":"Collection.Keyed","url":"/docs/v4.0.0-rc.15/Collection.Keyed"},{"label":"Collection.Indexed","url":"/docs/v4.0.0-rc.15/Collection.Indexed"},{"label":"Collection.Set","url":"/docs/v4.0.0-rc.15/Collection.Set"},{"label":"ValueObject","url":"/docs/v4.0.0-rc.15/ValueObject"},{"label":"fromJS()","url":"/docs/v4.0.0-rc.15/fromJS()"},{"label":"is()","url":"/docs/v4.0.0-rc.15/is()"},{"label":"hash()","url":"/docs/v4.0.0-rc.15/hash()"},{"label":"isImmutable()","url":"/docs/v4.0.0-rc.15/isImmutable()"},{"label":"isCollection()","url":"/docs/v4.0.0-rc.15/isCollection()"},{"label":"isKeyed()","url":"/docs/v4.0.0-rc.15/isKeyed()"},{"label":"isIndexed()","url":"/docs/v4.0.0-rc.15/isIndexed()"},{"label":"isAssociative()","url":"/docs/v4.0.0-rc.15/isAssociative()"},{"label":"isOrdered()","url":"/docs/v4.0.0-rc.15/isOrdered()"},{"label":"isValueObject()","url":"/docs/v4.0.0-rc.15/isValueObject()"},{"label":"isSeq()","url":"/docs/v4.0.0-rc.15/isSeq()"},{"label":"isList()","url":"/docs/v4.0.0-rc.15/isList()"},{"label":"isMap()","url":"/docs/v4.0.0-rc.15/isMap()"},{"label":"isOrderedMap()","url":"/docs/v4.0.0-rc.15/isOrderedMap()"},{"label":"isStack()","url":"/docs/v4.0.0-rc.15/isStack()"},{"label":"isSet()","url":"/docs/v4.0.0-rc.15/isSet()"},{"label":"isOrderedSet()","url":"/docs/v4.0.0-rc.15/isOrderedSet()"},{"label":"isRecord()","url":"/docs/v4.0.0-rc.15/isRecord()"},{"label":"get()","url":"/docs/v4.0.0-rc.15/get()"},{"label":"has()","url":"/docs/v4.0.0-rc.15/has()"},{"label":"remove()","url":"/docs/v4.0.0-rc.15/remove()"},{"label":"set()","url":"/docs/v4.0.0-rc.15/set()"},{"label":"update()","url":"/docs/v4.0.0-rc.15/update()"},{"label":"getIn()","url":"/docs/v4.0.0-rc.15/getIn()"},{"label":"hasIn()","url":"/docs/v4.0.0-rc.15/hasIn()"},{"label":"removeIn()","url":"/docs/v4.0.0-rc.15/removeIn()"},{"label":"setIn()","url":"/docs/v4.0.0-rc.15/setIn()"},{"label":"updateIn()","url":"/docs/v4.0.0-rc.15/updateIn()"},{"label":"merge()","url":"/docs/v4.0.0-rc.15/merge()"},{"label":"mergeWith()","url":"/docs/v4.0.0-rc.15/mergeWith()"},{"label":"mergeDeep()","url":"/docs/v4.0.0-rc.15/mergeDeep()"},{"label":"mergeDeepWith()","url":"/docs/v4.0.0-rc.15/mergeDeepWith()"}]}]
c:null
10:[["$","meta","0",{"charSet":"utf-8"}],["$","meta","1",{"name":"viewport","content":"width=device-width, initial-scale=1"}]]
b:null
14:{"metadata":[["$","title","0",{"children":"fromJS — Immutable.js"}],["$","meta","1",{"name":"robots","content":"noindex, follow"}],["$","link","2",{"rel":"canonical","href":"/docs/v5/fromJS()/"}],["$","link","3",{"rel":"icon","href":"/favicon.png"}]],"error":null,"digest":"$undefined"}
e:{"metadata":"$14:metadata","error":null,"digest":"$undefined"}
