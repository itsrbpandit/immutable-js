1:"$Sreact.fragment"
2:I[9287,[],""]
3:I[4235,[],""]
4:I[9534,["534","static/chunks/534-36991723363293d6.js","853","static/chunks/app/docs/%5Bversion%5D/page-1471691b270351d4.js"],""]
7:I[3621,[],"OutletBoundary"]
a:I[3621,[],"ViewportBoundary"]
c:I[3621,[],"MetadataBoundary"]
e:I[7890,[],""]
:HL["/_next/static/css/a4b7556e45b5277f.css","style"]
0:{"P":null,"b":"yCwv7RoYnRLv4jABeQ0JO","p":"","c":["","docs","latest%40main","OrderedMap",""],"i":false,"f":[[["",{"children":["docs",{"children":[["version","latest%40main","d"],{"children":[["type","OrderedMap","d"],{"children":["__PAGE__",{}]}]}]}]},"$undefined","$undefined",true],["",["$","$1","c",{"children":[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/a4b7556e45b5277f.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}]],["$","html",null,{"lang":"en","children":["$","body",null,{"children":["$","$L2",null,{"parallelRouterKey":"children","error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L3",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":[["$","div",null,{"className":"pageBody","children":[["$","h2",null,{"children":"Not Found"}],["$","p",null,{"children":"Could not find requested resource"}],["$","$L4",null,{"href":"/","children":"Return Home"}]]}],[]],"forbidden":"$undefined","unauthorized":"$undefined"}]}]}]]}],{"children":["docs",["$","$1","c",{"children":[null,["$","$L2",null,{"parallelRouterKey":"children","error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L3",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","forbidden":"$undefined","unauthorized":"$undefined"}]]}],{"children":[["version","latest%40main","d"],["$","$1","c",{"children":[null,"$L5"]}],{"children":[["type","OrderedMap","d"],["$","$1","c",{"children":[null,["$","$L2",null,{"parallelRouterKey":"children","error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L3",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","forbidden":"$undefined","unauthorized":"$undefined"}]]}],{"children":["__PAGE__",["$","$1","c",{"children":["$L6","$undefined",null,["$","$L7",null,{"children":["$L8","$L9",null]}]]}],{},null,false]},null,false]},null,false]},null,false]},null,false],["$","$1","h",{"children":[null,["$","$1","tKdpK59RZ5RaFrsp_Gmr4",{"children":[["$","$La",null,{"children":"$Lb"}],null]}],["$","$Lc",null,{"children":"$Ld"}]]}],false]],"m":"$undefined","G":["$e","$undefined"],"s":false,"S":true}
f:I[4366,["534","static/chunks/534-36991723363293d6.js","479","static/chunks/479-9d174c784fc467f1.js","502","static/chunks/app/docs/%5Bversion%5D/layout-3765e0e31eea4221.js"],"ImmutableConsole"]
10:I[7776,["534","static/chunks/534-36991723363293d6.js","479","static/chunks/479-9d174c784fc467f1.js","502","static/chunks/app/docs/%5Bversion%5D/layout-3765e0e31eea4221.js"],"HeaderLogoLink"]
11:I[7776,["534","static/chunks/534-36991723363293d6.js","479","static/chunks/479-9d174c784fc467f1.js","502","static/chunks/app/docs/%5Bversion%5D/layout-3765e0e31eea4221.js"],"HeaderLinks"]
12:I[6231,["534","static/chunks/534-36991723363293d6.js","650","static/chunks/app/docs/%5Bversion%5D/%5Btype%5D/page-e70284a08a775376.js"],"TypeDocumentation"]
5:["$","div",null,{"children":[["$","$Lf",null,{"version":"latest@main"}],["$","div",null,{"className":"header","children":["$","div",null,{"className":"miniHeader","children":["$","div",null,{"className":"miniHeaderContents","children":[["$","$L10",null,{}],["$","$L11",null,{"versions":["v4.0.0-rc.15","v3.8.2","latest@main"],"currentVersion":"latest@main"}]]}]}]}],["$","div",null,{"className":"pageBody","children":["$","div",null,{"className":"contents","children":["$","$L2",null,{"parallelRouterKey":"children","error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L3",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","forbidden":"$undefined","unauthorized":"$undefined"}]}]}]]}]
13:T7ed,<!-- runkit:activate -->
<code class="codeBlock"><span class="token keyword">const</span> <span class="token punctuation">{</span> <span class="token qualifier">Ordered</span><span class="token qualifier">Map</span> <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'immutable'</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> originalMap <span class="token operator">=</span> <span class="token function">OrderedMap</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token literal-property property">a</span><span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token literal-property property">b</span><span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token literal-property property">c</span><span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> updatedMap <span class="token operator">=</span> originalMap<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span>

originalMap
<span class="token comment">// OrderedMap {a: 1, b: 1, c: 1}</span>
updatedMap
<span class="token comment">// OrderedMap {a: 1, b: 2, c: 1}</span><a class="try-it" data-options="%7B%7D" onClick="runIt(this,'latest@main')">run it</a></code><p>Note: <code><a href="/docs/latest@main/OrderedMap#set()">set</a></code> can be used in <code><a href="/docs/latest@main/OrderedMap#withMutations()">withMutations</a></code>.</p>
14:T437,<code class="codeBlock"><span class="token function">OrderedMap</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token literal-property property">b</span><span class="token operator">:</span> <span class="token number">2</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token parameter">x</span> <span class="token operator">=></span> <span class="token number">10</span> <span class="token operator">*</span> x<span class="token punctuation">)</span>
<span class="token comment">// OrderedMap { "a": 10, "b": 20 }</span></code><p>Note: <code><a href="/docs/latest@main/OrderedMap#map()">map()</a></code> always returns a new instance, even if it produced the same
value at every step.</p>
15:T725,<p>Note: <code><a href="/docs/latest@main/Map#delete()">delete</a></code> cannot be safely used in IE8, but is provided to mirror
the ES6 collection API.</p>
<!-- runkit:activate -->
<code class="codeBlock"><span class="token keyword">const</span> <span class="token punctuation">{</span> <span class="token qualifier">Map</span> <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'immutable'</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> originalMap <span class="token operator">=</span> <span class="token function">Map</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token literal-property property">key</span><span class="token operator">:</span> <span class="token string">'value'</span><span class="token punctuation">,</span>
  <span class="token literal-property property">otherKey</span><span class="token operator">:</span> <span class="token string">'other value'</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token comment">// Map { "key": "value", "otherKey": "other value" }</span>
originalMap<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span><span class="token string">'otherKey'</span><span class="token punctuation">)</span>
<span class="token comment">// Map { "key": "value" }</span><a class="try-it" data-options="%7B%7D" onClick="runIt(this,'latest@main')">run it</a></code><p>Note: <code><a href="/docs/latest@main/Map#delete()">delete</a></code> can be used in <code><a href="/docs/latest@main/Map#withMutations()">withMutations</a></code>.</p>
16:T766,<!-- runkit:activate -->
<p><code class="codeBlock"><span class="token keyword">const</span> <span class="token punctuation">{</span> <span class="token qualifier">Map</span> <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'immutable'</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> names <span class="token operator">=</span> <span class="token function">Map</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token string">"Aaron"</span><span class="token punctuation">,</span> <span class="token literal-property property">b</span><span class="token operator">:</span> <span class="token string">"Barry"</span><span class="token punctuation">,</span> <span class="token literal-property property">c</span><span class="token operator">:</span> <span class="token string">"Connor"</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
names<span class="token punctuation">.</span><span class="token function">deleteAll</span><span class="token punctuation">(</span><span class="token punctuation">[</span> <span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'c'</span> <span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token comment">// Map { "b": "Barry" }</span><a class="try-it" data-options="%7B%7D" onClick="runIt(this,'latest@main')">run it</a></code><p>Note: <code><a href="/docs/latest@main/Map#deleteAll()">deleteAll</a></code> can be used in <code><a href="/docs/latest@main/Map#withMutations()">withMutations</a></code>.</p></p>
17:T4d1,<!-- runkit:activate -->
<p><code class="codeBlock"><span class="token keyword">const</span> <span class="token punctuation">{</span> <span class="token qualifier">Map</span> <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'immutable'</span><span class="token punctuation">)</span>
<span class="token function">Map</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">key</span><span class="token operator">:</span> <span class="token string">'value'</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token comment">// Map {}</span><a class="try-it" data-options="%7B%7D" onClick="runIt(this,'latest@main')">run it</a></code><p>Note: <code><a href="/docs/latest@main/Map#clear()">clear</a></code> can be used in <code><a href="/docs/latest@main/Map#withMutations()">withMutations</a></code>.</p></p>
18:T11fa,<!-- runkit:activate -->
<p><code class="codeBlock"><span class="token keyword">const</span> <span class="token punctuation">{</span> <span class="token qualifier">Map</span> <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'immutable'</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> one <span class="token operator">=</span> <span class="token function">Map</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token function">Map</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">x</span><span class="token operator">:</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token literal-property property">y</span><span class="token operator">:</span> <span class="token number">10</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token literal-property property">b</span><span class="token operator">:</span> <span class="token function">Map</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">x</span><span class="token operator">:</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token literal-property property">y</span><span class="token operator">:</span> <span class="token number">50</span> <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> two <span class="token operator">=</span> <span class="token function">Map</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token function">Map</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">x</span><span class="token operator">:</span> <span class="token number">2</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token literal-property property">b</span><span class="token operator">:</span> <span class="token function">Map</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">y</span><span class="token operator">:</span> <span class="token number">5</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token literal-property property">c</span><span class="token operator">:</span> <span class="token function">Map</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">z</span><span class="token operator">:</span> <span class="token number">3</span> <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
one<span class="token punctuation">.</span><span class="token function">mergeDeepWith</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">oldVal<span class="token punctuation">,</span> newVal</span><span class="token punctuation">)</span> <span class="token operator">=></span> oldVal <span class="token operator">/</span> newVal<span class="token punctuation">,</span> two<span class="token punctuation">)</span>
<span class="token comment">// Map {</span>
<span class="token comment">//   "a": Map { "x": 5, "y": 10 },</span>
<span class="token comment">//   "b": Map { "x": 20, "y": 10 },</span>
<span class="token comment">//   "c": Map { "z": 3 }</span>
<span class="token comment">// }</span><a class="try-it" data-options="%7B%7D" onClick="runIt(this,'latest@main')">run it</a></code><p>Note: <code><a href="/docs/latest@main/Map#mergeDeepWith()">mergeDeepWith</a></code> can be used in <code><a href="/docs/latest@main/Map#withMutations()">withMutations</a></code>.</p></p>
19:T1987,<!-- runkit:activate -->
<p><code class="codeBlock"><span class="token keyword">const</span> <span class="token punctuation">{</span> <span class="token qualifier">Map</span> <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'immutable'</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> originalMap <span class="token operator">=</span> <span class="token function">Map</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token literal-property property">subObject</span><span class="token operator">:</span> <span class="token function">Map</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token literal-property property">subKey</span><span class="token operator">:</span> <span class="token string">'subvalue'</span><span class="token punctuation">,</span>
    <span class="token literal-property property">subSubObject</span><span class="token operator">:</span> <span class="token function">Map</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
      <span class="token literal-property property">subSubKey</span><span class="token operator">:</span> <span class="token string">'subSubValue'</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span></p>
<p><span class="token keyword">const</span> newMap <span class="token operator">=</span> originalMap<span class="token punctuation">.</span><span class="token function">setIn</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'subObject'</span><span class="token punctuation">,</span> <span class="token string">'subKey'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">'ha ha!'</span><span class="token punctuation">)</span>
<span class="token comment">// Map {</span>
<span class="token comment">//   "subObject": Map {</span>
<span class="token comment">//     "subKey": "ha ha!",</span>
<span class="token comment">//     "subSubObject": Map { "subSubKey": "subSubValue" }</span>
<span class="token comment">//   }</span>
<span class="token comment">// }</span></p>
<p><span class="token keyword">const</span> newerMap <span class="token operator">=</span> originalMap<span class="token punctuation">.</span><span class="token function">setIn</span><span class="token punctuation">(</span>
  <span class="token punctuation">[</span><span class="token string">'subObject'</span><span class="token punctuation">,</span> <span class="token string">'subSubObject'</span><span class="token punctuation">,</span> <span class="token string">'subSubKey'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token string">'ha ha ha!'</span>
<span class="token punctuation">)</span>
<span class="token comment">// Map {</span>
<span class="token comment">//   "subObject": Map {</span>
<span class="token comment">//     "subKey": "subvalue",</span>
<span class="token comment">//     "subSubObject": Map { "subSubKey": "ha ha ha!" }</span>
<span class="token comment">//   }</span>
<span class="token comment">// }</span><a class="try-it" data-options="%7B%7D" onClick="runIt(this,'latest@main')">run it</a></code><p>Plain JavaScript Object or Arrays may be nested within an Immutable.js
Collection, and setIn() can update those values as well, treating them
immutably by creating new copies of those values with the changes applied.</p></p>
<!-- runkit:activate -->
<p><code class="codeBlock"><span class="token keyword">const</span> <span class="token punctuation">{</span> <span class="token qualifier">Map</span> <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'immutable'</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> originalMap <span class="token operator">=</span> <span class="token function">Map</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token literal-property property">subObject</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">subKey</span><span class="token operator">:</span> <span class="token string">'subvalue'</span><span class="token punctuation">,</span>
    <span class="token literal-property property">subSubObject</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token literal-property property">subSubKey</span><span class="token operator">:</span> <span class="token string">'subSubValue'</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span></p>
<p>originalMap<span class="token punctuation">.</span><span class="token function">setIn</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'subObject'</span><span class="token punctuation">,</span> <span class="token string">'subKey'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">'ha ha!'</span><span class="token punctuation">)</span>
<span class="token comment">// Map {</span>
<span class="token comment">//   "subObject": {</span>
<span class="token comment">//     subKey: "ha ha!",</span>
<span class="token comment">//     subSubObject: { subSubKey: "subSubValue" }</span>
<span class="token comment">//   }</span>
<span class="token comment">// }</span><a class="try-it" data-options="%7B%7D" onClick="runIt(this,'latest@main')">run it</a></code><p>If any key in the path exists but cannot be updated (such as a primitive
like number or a custom Object like Date), an error will be thrown.</p></p>
<p>Note: <code><a href="/docs/latest@main/Map#setIn()">setIn</a></code> can be used in <code><a href="/docs/latest@main/Map#withMutations()">withMutations</a></code>.</p>
1a:T58d,<p><code class="codeBlock">map<span class="token punctuation">.</span><span class="token function">updateIn</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token parameter">abc</span> <span class="token operator">=></span> abc<span class="token punctuation">.</span><span class="token function">merge</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">)</span>
map<span class="token punctuation">.</span><span class="token function">mergeIn</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> y<span class="token punctuation">)</span></code><p>Note: <code><a href="/docs/latest@main/Map#mergeIn()">mergeIn</a></code> can be used in <code><a href="/docs/latest@main/Map#withMutations()">withMutations</a></code>.</p></p>
1b:T59d,<p><code class="codeBlock">map<span class="token punctuation">.</span><span class="token function">updateIn</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token parameter">abc</span> <span class="token operator">=></span> abc<span class="token punctuation">.</span><span class="token function">mergeDeep</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">)</span>
map<span class="token punctuation">.</span><span class="token function">mergeDeepIn</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> y<span class="token punctuation">)</span></code><p>Note: <code><a href="/docs/latest@main/Map#mergeDeepIn()">mergeDeepIn</a></code> can be used in <code><a href="/docs/latest@main/Map#withMutations()">withMutations</a></code>.</p></p>
1c:Tced,<p>If you need to apply a series of mutations to produce a new immutable
Map, <code><a href="/docs/latest@main/Map#withMutations()">withMutations()</a></code> creates a temporary mutable copy of the Map which
can apply mutations in a highly performant manner. In fact, this is
exactly how complex mutations like <code><a href="/docs/latest@main/Map#merge()">merge</a></code> are done.</p>
<p>As an example, this results in the creation of 2, not 4, new Maps:</p>
<!-- runkit:activate -->
<code class="codeBlock"><span class="token keyword">const</span> <span class="token punctuation">{</span> <span class="token qualifier">Map</span> <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'immutable'</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> map1 <span class="token operator">=</span> <span class="token function">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> map2 <span class="token operator">=</span> map1<span class="token punctuation">.</span><span class="token function">withMutations</span><span class="token punctuation">(</span><span class="token parameter">map</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
  map<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">'c'</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
assert<span class="token punctuation">.</span><span class="token function">equal</span><span class="token punctuation">(</span>map1<span class="token punctuation">.</span>size<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>
assert<span class="token punctuation">.</span><span class="token function">equal</span><span class="token punctuation">(</span>map2<span class="token punctuation">.</span>size<span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><a class="try-it" data-options="%7B%7D" onClick="runIt(this,'latest@main')">run it</a></code><p>Note: Not all methods can be used on a mutable collection or within
<code><a href="/docs/latest@main/Map#withMutations()">withMutations</a></code>! Read the documentation for each method to see if it
is safe to use in <code><a href="/docs/latest@main/Map#withMutations()">withMutations</a></code>.</p>
1d:T1060,<p>If a <code><span class="t param">comparator</span></code> is not provided, a default comparator uses <code><span class="token operator">&lt;</span></code> and <code><span class="token operator">></span></code>.</p>
<p><code><span class="token function">comparator</span><span class="token punctuation">(</span>valueA<span class="token punctuation">,</span> valueB<span class="token punctuation">)</span></code>:</p>
<ul>
<li>Returns <code><span class="token number">0</span></code> if the elements should not be swapped.</li>
<li>Returns <code><span class="token operator">-</span><span class="token number">1</span></code> (or any negative number) if <code>valueA</code> comes before <code>valueB</code></li>
<li>Returns <code><span class="token number">1</span></code> (or any positive number) if <code>valueA</code> comes after <code>valueB</code></li>
<li>Alternatively, can return a value of the <code><span class="token qualifier">Pair</span><span class="token qualifier">Sorting</span></code> enum type</li>
<li>Is pure, i.e. it must always return the same value for the same pair
of values.</li>
</ul>
<!-- runkit:activate -->
<code class="codeBlock"><span class="token keyword">const</span> <span class="token punctuation">{</span> <span class="token qualifier">Map</span> <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'immutable'</span><span class="token punctuation">)</span>
<span class="token function">Map</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token string-property property">"c"</span><span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token string-property property">"a"</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string-property property">"b"</span><span class="token operator">:</span> <span class="token number">2</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
  <span class="token block-keyword">if</span> <span class="token punctuation">(</span>a <span class="token operator">&lt;</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
  <span class="token block-keyword">if</span> <span class="token punctuation">(</span>a <span class="token operator">></span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
  <span class="token block-keyword">if</span> <span class="token punctuation">(</span>a <span class="token operator">===</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// OrderedMap { "a": 1, "b": 2, "c": 3 }</span><a class="try-it" data-options="%7B%7D" onClick="runIt(this,'latest@main')">run it</a></code><p>Note: <code><a href="/docs/latest@main/Map#sort()">sort()</a></code> Always returns a new instance, even if the original was
already sorted.</p>
<p>Note: This is always an eager operation.</p>
1e:Tacb,<!-- runkit:activate -->
<p><code class="codeBlock"><span class="token keyword">const</span> <span class="token punctuation">{</span> <span class="token qualifier">Map</span> <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'immutable'</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> beattles <span class="token operator">=</span> <span class="token function">Map</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token qualifier">John</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">"Lennon"</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token qualifier">Paul</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">"McCartney"</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token qualifier">George</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">"Harrison"</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token qualifier">Ringo</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">"Starr"</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
beattles<span class="token punctuation">.</span><span class="token function">sortBy</span><span class="token punctuation">(</span><span class="token parameter">member</span> <span class="token operator">=></span> member<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span><a class="try-it" data-options="%7B%7D" onClick="runIt(this,'latest@main')">run it</a></code><p>Note: <code><a href="/docs/latest@main/Map#sortBy()">sortBy()</a></code> Always returns a new instance, even if the original was
already sorted.</p></p>
<p>Note: This is always an eager operation.</p>
1f:Tc1e,<p>The <code><a href="/docs/latest@main/List#hashCode()">hashCode</a></code> of a Collection is used to determine potential equality,
and is used when adding this to a <code><a href="/docs/latest@main/Set">Set</a></code> or as a key in a <code><a href="/docs/latest@main/Map">Map</a></code>, enabling
lookup via a different instance.</p>
<!-- runkit:activate
     { "preamble": "const { Set,  List } = require('immutable')" }
-->
<code class="codeBlock"><span class="token keyword">const</span> a <span class="token operator">=</span> <span class="token function">List</span><span class="token punctuation">(</span><span class="token punctuation">[</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span> <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> b <span class="token operator">=</span> <span class="token function">List</span><span class="token punctuation">(</span><span class="token punctuation">[</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span> <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
assert<span class="token punctuation">.</span><span class="token function">notStrictEqual</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// different instances</span>
<span class="token keyword">const</span> set <span class="token operator">=</span> <span class="token function">Set</span><span class="token punctuation">(</span><span class="token punctuation">[</span> a <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
assert<span class="token punctuation">.</span><span class="token function">equal</span><span class="token punctuation">(</span>set<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token primitive">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><a class="try-it" data-options="%7B%22preamble%22%3A%22const%20%7B%20Set%2C%20%20List%20%7D%20%3D%20require%28%27immutable%27%29%22%7D" onClick="runIt(this,'latest@main')">run it</a></code><p>If two values have the same <code><a href="/docs/latest@main/List#hashCode()">hashCode</a></code>, they are <a href="https://en.wikipedia.org/wiki/Collision_(computer_science)">not guaranteed
to be equal</a>. If two values have different <code><a href="/docs/latest@main/List#hashCode()">hashCode</a></code>s,
they must not be equal.</p>
20:Tf85,<!-- runkit:activate -->
<p><code class="codeBlock"><span class="token keyword">const</span> <span class="token punctuation">{</span> <span class="token qualifier">Map</span><span class="token punctuation">,</span> <span class="token qualifier">List</span> <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'immutable'</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> deepData <span class="token operator">=</span> <span class="token function">Map</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">x</span><span class="token operator">:</span> <span class="token function">List</span><span class="token punctuation">(</span><span class="token punctuation">[</span> <span class="token function">Map</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">y</span><span class="token operator">:</span> <span class="token number">123</span> <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
deepData<span class="token punctuation">.</span><span class="token function">getIn</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'x'</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">'y'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment">// 123</span><a class="try-it" data-options="%7B%7D" onClick="runIt(this,'latest@main')">run it</a></code><p>Plain JavaScript Object or Arrays may be nested within an Immutable.js
Collection, and getIn() can access those values as well:</p></p>
<!-- runkit:activate -->
<p><code class="codeBlock"><span class="token keyword">const</span> <span class="token punctuation">{</span> <span class="token qualifier">Map</span><span class="token punctuation">,</span> <span class="token qualifier">List</span> <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'immutable'</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> deepData <span class="token operator">=</span> <span class="token function">Map</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">x</span><span class="token operator">:</span> <span class="token punctuation">[</span> <span class="token punctuation">{</span> <span class="token literal-property property">y</span><span class="token operator">:</span> <span class="token number">123</span> <span class="token punctuation">}</span> <span class="token punctuation">]</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
deepData<span class="token punctuation">.</span><span class="token function">getIn</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'x'</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">'y'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment">// 123</span><a class="try-it" data-options="%7B%7D" onClick="runIt(this,'latest@main')">run it</a></code></p>
21:T8b1,<p>This is similar to <code><a href="/docs/latest@main/List">List(collection)</a></code>, but provided to allow for chained
expressions. However, when called on <code><a href="/docs/latest@main/Map">Map</a></code> or other keyed collections,
<code>collection<span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code> discards the keys and creates a list of only the
values, whereas <code><a href="/docs/latest@main/List">List(collection)</a></code> creates a list of entry tuples.</p>
<!-- runkit:activate -->
<code class="codeBlock"><span class="token keyword">const</span> <span class="token punctuation">{</span> <span class="token qualifier">Map</span><span class="token punctuation">,</span> <span class="token qualifier">List</span> <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'immutable'</span><span class="token punctuation">)</span>
<span class="token keyword">var</span> myMap <span class="token operator">=</span> <span class="token function">Map</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token string">'Apple'</span><span class="token punctuation">,</span> <span class="token literal-property property">b</span><span class="token operator">:</span> <span class="token string">'Banana'</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token function">List</span><span class="token punctuation">(</span>myMap<span class="token punctuation">)</span> <span class="token comment">// List [ [ "a", "Apple" ], [ "b", "Banana" ] ]</span>
myMap<span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// List [ "Apple", "Banana" ]</span><a class="try-it" data-options="%7B%7D" onClick="runIt(this,'latest@main')">run it</a></code>22:T925,<p>This is useful if you want to operate on an
Collection.Indexed and preserve the [index, value] pairs.</p>
<p>The returned Seq will have identical iteration order as
this Collection.</p>
<!-- runkit:activate -->
<code class="codeBlock"><span class="token keyword">const</span> <span class="token punctuation">{</span> <span class="token qualifier">Seq</span> <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'immutable'</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> indexedSeq <span class="token operator">=</span> <span class="token function">Seq</span><span class="token punctuation">(</span><span class="token punctuation">[</span> <span class="token string">'A'</span><span class="token punctuation">,</span> <span class="token string">'B'</span><span class="token punctuation">,</span> <span class="token string">'C'</span> <span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token comment">// Seq [ "A", "B", "C" ]</span>
indexedSeq<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token parameter">v</span> <span class="token operator">=></span> v <span class="token operator">===</span> <span class="token string">'B'</span><span class="token punctuation">)</span>
<span class="token comment">// Seq [ "B" ]</span>
<span class="token keyword">const</span> keyedSeq <span class="token operator">=</span> indexedSeq<span class="token punctuation">.</span><span class="token function">toKeyedSeq</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token comment">// Seq { 0: "A", 1: "B", 2: "C" }</span>
keyedSeq<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token parameter">v</span> <span class="token operator">=></span> v <span class="token operator">===</span> <span class="token string">'B'</span><span class="token punctuation">)</span>
<span class="token comment">// Seq { 1: "B" }</span><a class="try-it" data-options="%7B%7D" onClick="runIt(this,'latest@main')">run it</a></code>23:T7b8,<!-- runkit:activate -->
<p><code class="codeBlock"><span class="token keyword">const</span> <span class="token punctuation">{</span> <span class="token qualifier">Map</span> <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'immutable'</span><span class="token punctuation">)</span>
<span class="token function">Map</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token literal-property property">b</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token literal-property property">c</span><span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token literal-property property">d</span><span class="token operator">:</span> <span class="token number">4</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">filterNot</span><span class="token punctuation">(</span><span class="token parameter">x</span> <span class="token operator">=></span> x <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span>
<span class="token comment">// Map { "a": 1, "c": 3 }</span><a class="try-it" data-options="%7B%7D" onClick="runIt(this,'latest@main')">run it</a></code><p>Note: <code><a href="/docs/latest@main/List#filterNot()">filterNot()</a></code> always returns a new instance, even if it results in
not filtering out any values.</p></p>
24:Te17,<p>Note: This is always an eager operation.</p>
<!-- runkit:activate -->
<code class="codeBlock"><span class="token keyword">const</span> <span class="token punctuation">{</span> <span class="token qualifier">List</span><span class="token punctuation">,</span> <span class="token qualifier">Map</span> <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'immutable'</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> listOfMaps <span class="token operator">=</span> <span class="token function">List</span><span class="token punctuation">(</span><span class="token punctuation">[</span>
  <span class="token function">Map</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">v</span><span class="token operator">:</span> <span class="token number">0</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token function">Map</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">v</span><span class="token operator">:</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token function">Map</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">v</span><span class="token operator">:</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token function">Map</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">v</span><span class="token operator">:</span> <span class="token number">0</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token function">Map</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">v</span><span class="token operator">:</span> <span class="token number">2</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> groupsOfMaps <span class="token operator">=</span> listOfMaps<span class="token punctuation">.</span><span class="token function">groupBy</span><span class="token punctuation">(</span><span class="token parameter">x</span> <span class="token operator">=></span> x<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'v'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token comment">// Map {</span>
<span class="token comment">//   0: List [ Map{ "v": 0 }, Map { "v": 0 } ],</span>
<span class="token comment">//   1: List [ Map{ "v": 1 }, Map { "v": 1 } ],</span>
<span class="token comment">//   2: List [ Map{ "v": 2 } ],</span>
<span class="token comment">// }</span><a class="try-it" data-options="%7B%7D" onClick="runIt(this,'latest@main')">run it</a></code>25:T403,<p>If begin is negative, it is offset from the end of the Collection. e.g.
<code><span class="token function">slice</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">)</span></code> returns a Collection of the last two entries. If it is not
provided the new Collection will begin at the beginning of this Collection.</p>
<p>If end is negative, it is offset from the end of the Collection. e.g.
<code><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span></code> returns a Collection of everything but the last entry. If
it is not provided, the new Collection will continue through the end of
this Collection.</p>
<p>If the requested slice is equivalent to the current Collection, then it
will return itself.</p>
26:T6c8,<!-- runkit:activate -->
<p><code class="codeBlock"><span class="token keyword">const</span> <span class="token punctuation">{</span> <span class="token qualifier">List</span> <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'immutable'</span><span class="token punctuation">)</span>
<span class="token function">List</span><span class="token punctuation">(</span><span class="token punctuation">[</span> <span class="token string">'dog'</span><span class="token punctuation">,</span> <span class="token string">'frog'</span><span class="token punctuation">,</span> <span class="token string">'cat'</span><span class="token punctuation">,</span> <span class="token string">'hat'</span><span class="token punctuation">,</span> <span class="token string">'god'</span> <span class="token punctuation">]</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">skipWhile</span><span class="token punctuation">(</span><span class="token parameter">x</span> <span class="token operator">=></span> x<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">g</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token comment">// List [ "cat", "hat", "god" ]</span><a class="try-it" data-options="%7B%7D" onClick="runIt(this,'latest@main')">run it</a></code></p>
27:T6c3,<!-- runkit:activate -->
<p><code class="codeBlock"><span class="token keyword">const</span> <span class="token punctuation">{</span> <span class="token qualifier">List</span> <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'immutable'</span><span class="token punctuation">)</span>
<span class="token function">List</span><span class="token punctuation">(</span><span class="token punctuation">[</span> <span class="token string">'dog'</span><span class="token punctuation">,</span> <span class="token string">'frog'</span><span class="token punctuation">,</span> <span class="token string">'cat'</span><span class="token punctuation">,</span> <span class="token string">'hat'</span><span class="token punctuation">,</span> <span class="token string">'god'</span> <span class="token punctuation">]</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">skipUntil</span><span class="token punctuation">(</span><span class="token parameter">x</span> <span class="token operator">=></span> x<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">hat</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token comment">// List [ "hat", "god" ]</span><a class="try-it" data-options="%7B%7D" onClick="runIt(this,'latest@main')">run it</a></code></p>
28:T6c2,<!-- runkit:activate -->
<p><code class="codeBlock"><span class="token keyword">const</span> <span class="token punctuation">{</span> <span class="token qualifier">List</span> <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'immutable'</span><span class="token punctuation">)</span>
<span class="token function">List</span><span class="token punctuation">(</span><span class="token punctuation">[</span> <span class="token string">'dog'</span><span class="token punctuation">,</span> <span class="token string">'frog'</span><span class="token punctuation">,</span> <span class="token string">'cat'</span><span class="token punctuation">,</span> <span class="token string">'hat'</span><span class="token punctuation">,</span> <span class="token string">'god'</span> <span class="token punctuation">]</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">takeWhile</span><span class="token punctuation">(</span><span class="token parameter">x</span> <span class="token operator">=></span> x<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">o</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token comment">// List [ "dog", "frog" ]</span><a class="try-it" data-options="%7B%7D" onClick="runIt(this,'latest@main')">run it</a></code></p>
29:T6c3,<!-- runkit:activate -->
<p><code class="codeBlock"><span class="token keyword">const</span> <span class="token punctuation">{</span> <span class="token qualifier">List</span> <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'immutable'</span><span class="token punctuation">)</span>
<span class="token function">List</span><span class="token punctuation">(</span><span class="token punctuation">[</span> <span class="token string">'dog'</span><span class="token punctuation">,</span> <span class="token string">'frog'</span><span class="token punctuation">,</span> <span class="token string">'cat'</span><span class="token punctuation">,</span> <span class="token string">'hat'</span><span class="token punctuation">,</span> <span class="token string">'god'</span> <span class="token punctuation">]</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">takeUntil</span><span class="token punctuation">(</span><span class="token parameter">x</span> <span class="token operator">=></span> x<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">at</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token comment">// List [ "dog", "frog" ]</span><a class="try-it" data-options="%7B%7D" onClick="runIt(this,'latest@main')">run it</a></code></p>
2a:Ta43,<!-- runkit:activate -->
<p><code class="codeBlock"><span class="token keyword">const</span> <span class="token punctuation">{</span> <span class="token qualifier">List</span><span class="token punctuation">,</span> <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'immutable'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> l <span class="token operator">=</span> <span class="token function">List</span><span class="token punctuation">(</span><span class="token punctuation">[</span>
  <span class="token punctuation">{</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'Bob'</span><span class="token punctuation">,</span> <span class="token literal-property property">avgHit</span><span class="token operator">:</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">{</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'Max'</span><span class="token punctuation">,</span> <span class="token literal-property property">avgHit</span><span class="token operator">:</span> <span class="token number">3</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">{</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'Lili'</span><span class="token punctuation">,</span> <span class="token literal-property property">avgHit</span><span class="token operator">:</span> <span class="token number">2</span> <span class="token punctuation">}</span> <span class="token punctuation">,</span>
<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
l<span class="token punctuation">.</span><span class="token function">maxBy</span><span class="token punctuation">(</span><span class="token parameter">i</span> <span class="token operator">=></span> i<span class="token punctuation">.</span>avgHit<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// will output { name: 'Max', avgHit: 3 }</span><a class="try-it" data-options="%7B%7D" onClick="runIt(this,'latest@main')">run it</a></code></p>
2b:Ta43,<!-- runkit:activate -->
<p><code class="codeBlock"><span class="token keyword">const</span> <span class="token punctuation">{</span> <span class="token qualifier">List</span><span class="token punctuation">,</span> <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'immutable'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> l <span class="token operator">=</span> <span class="token function">List</span><span class="token punctuation">(</span><span class="token punctuation">[</span>
  <span class="token punctuation">{</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'Bob'</span><span class="token punctuation">,</span> <span class="token literal-property property">avgHit</span><span class="token operator">:</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">{</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'Max'</span><span class="token punctuation">,</span> <span class="token literal-property property">avgHit</span><span class="token operator">:</span> <span class="token number">3</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">{</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'Lili'</span><span class="token punctuation">,</span> <span class="token literal-property property">avgHit</span><span class="token operator">:</span> <span class="token number">2</span> <span class="token punctuation">}</span> <span class="token punctuation">,</span>
<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
l<span class="token punctuation">.</span><span class="token function">minBy</span><span class="token punctuation">(</span><span class="token parameter">i</span> <span class="token operator">=></span> i<span class="token punctuation">.</span>avgHit<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// will output { name: 'Bob', avgHit: 1 }</span><a class="try-it" data-options="%7B%7D" onClick="runIt(this,'latest@main')">run it</a></code></p>
6:["$","$L12",null,{"def":{"qualifiedName":"OrderedMap","doc":{"synopsis":"<p>A type of Map that has the additional guarantee that the iteration order of\nentries will be the order in which they were set().</p>\n","description":"<p>The iteration behavior of OrderedMap is the same as native ES6 Map and\nJavaScript Object.</p>\n<p>Note that <code><a href=\"/docs/latest@main/OrderedMap\">OrderedMap</a></code> are more expensive than non-ordered <code><a href=\"/docs/latest@main/Map\">Map</a></code> and may\nconsume more memory. <code><a href=\"/docs/latest@main/OrderedMap#set()\">OrderedMap#set</a></code> is amortized O(log32 N), but not\nstable.</p>\n","notes":[]},"functions":{"isOrderedMap":{"name":"OrderedMap.isOrderedMap","label":"OrderedMap.isOrderedMap()","id":"isOrderedMap()","isStatic":true,"signatures":[{"line":1699,"params":[{"name":"maybeOrderedMap","type":{"k":2}}],"type":{"k":5}}],"url":"/docs/latest@main/OrderedMap#isOrderedMap()"}},"call":{"name":"OrderedMap","label":"OrderedMap()","id":"OrderedMap()","signatures":[{"line":1719,"typeParams":["K","V"],"params":[{"name":"collection","type":{"k":12,"name":"Iterable","args":[{"k":15,"types":[{"k":11,"param":"K"},{"k":11,"param":"V"}]}]},"optional":true}],"type":{"k":12,"name":"OrderedMap","args":[{"k":11,"param":"K"},{"k":11,"param":"V"}],"url":"/docs/latest@main/OrderedMap"}},{"line":1720,"typeParams":["V"],"params":[{"name":"obj","type":{"k":8,"members":[{"index":true,"params":[{"name":"key","type":{"k":7}}],"type":{"k":11,"param":"V"}}]}}],"type":{"k":12,"name":"OrderedMap","args":[{"k":7},{"k":11,"param":"V"}],"url":"/docs/latest@main/OrderedMap"}}],"url":"/docs/latest@main/OrderedMap#OrderedMap()"},"interface":{"members":{"size":{"name":"size","label":"size","id":"size","line":1726,"doc":{"synopsis":"<p>The number of entries in this OrderedMap.</p>\n","description":"","notes":[]},"type":{"k":6},"url":"/docs/latest@main/OrderedMap#size","overrides":{"interface":"Map","label":"size","url":"/docs/latest@main/Map#size"}},"set":{"name":"set","label":"set()","id":"set()","group":"Persistent changes","doc":{"synopsis":"<p>Returns a new OrderedMap also containing the new key, value pair. If an\nequivalent key already exists in this OrderedMap, it will be replaced\nwhile maintaining the existing order.</p>\n","description":"$13","notes":[]},"signatures":[{"line":1747,"params":[{"name":"key","type":{"k":11,"param":"K"}},{"name":"value","type":{"k":11,"param":"V"}}],"type":{"k":3}}],"url":"/docs/latest@main/OrderedMap#set()","overrides":{"interface":"Map","label":"set()","url":"/docs/latest@main/Map#set()"}},"merge":{"name":"merge","label":"merge()","id":"merge()","group":"Persistent changes","signatures":[{"line":1770,"typeParams":["KC","VC"],"params":[{"name":"collections","type":{"k":12,"name":"Array","args":[{"k":12,"name":"Iterable","args":[{"k":15,"types":[{"k":11,"param":"KC"},{"k":11,"param":"VC"}]}]}]},"varArgs":true}],"type":{"k":12,"name":"OrderedMap","args":[{"k":13,"types":[{"k":11,"param":"K"},{"k":11,"param":"KC"}]},{"k":13,"types":[{"k":12,"name":"Exclude","args":[{"k":11,"param":"V"},{"k":11,"param":"VC"}]},{"k":11,"param":"VC"}]}],"url":"/docs/latest@main/OrderedMap"}},{"line":1773,"typeParams":["C"],"params":[{"name":"collections","type":{"k":12,"name":"Array","args":[{"k":8,"members":[{"index":true,"params":[{"name":"key","type":{"k":7}}],"type":{"k":11,"param":"C"}}]}]},"varArgs":true}],"type":{"k":12,"name":"OrderedMap","args":[{"k":13,"types":[{"k":11,"param":"K"},{"k":7}]},{"k":13,"types":[{"k":12,"name":"Exclude","args":[{"k":11,"param":"V"},{"k":11,"param":"C"}]},{"k":11,"param":"C"}]}],"url":"/docs/latest@main/OrderedMap"}}],"url":"/docs/latest@main/OrderedMap#merge()","overrides":{"interface":"Map","label":"merge()","url":"/docs/latest@main/Map#merge()"}},"mergeWith":{"name":"mergeWith","label":"mergeWith()","id":"mergeWith()","group":"Persistent changes","signatures":[{"line":1784,"typeParams":["KC","VC","VCC"],"params":[{"name":"merger","type":{"k":10,"params":[{"name":"oldVal","type":{"k":11,"param":"V"}},{"name":"newVal","type":{"k":11,"param":"VC"}},{"name":"key","type":{"k":11,"param":"K"}}],"type":{"k":11,"param":"VCC"}}},{"name":"collections","type":{"k":12,"name":"Array","args":[{"k":12,"name":"Iterable","args":[{"k":15,"types":[{"k":11,"param":"KC"},{"k":11,"param":"VC"}]}]}]},"varArgs":true}],"type":{"k":12,"name":"OrderedMap","args":[{"k":13,"types":[{"k":11,"param":"K"},{"k":11,"param":"KC"}]},{"k":13,"types":[{"k":11,"param":"V"},{"k":11,"param":"VC"},{"k":11,"param":"VCC"}]}],"url":"/docs/latest@main/OrderedMap"}},{"line":1788,"typeParams":["C","CC"],"params":[{"name":"merger","type":{"k":10,"params":[{"name":"oldVal","type":{"k":11,"param":"V"}},{"name":"newVal","type":{"k":11,"param":"C"}},{"name":"key","type":{"k":7}}],"type":{"k":11,"param":"CC"}}},{"name":"collections","type":{"k":12,"name":"Array","args":[{"k":8,"members":[{"index":true,"params":[{"name":"key","type":{"k":7}}],"type":{"k":11,"param":"C"}}]}]},"varArgs":true}],"type":{"k":12,"name":"OrderedMap","args":[{"k":13,"types":[{"k":11,"param":"K"},{"k":7}]},{"k":13,"types":[{"k":11,"param":"V"},{"k":11,"param":"C"},{"k":11,"param":"CC"}]}],"url":"/docs/latest@main/OrderedMap"}}],"url":"/docs/latest@main/OrderedMap#mergeWith()","overrides":{"interface":"Map","label":"mergeWith()","url":"/docs/latest@main/Map#mergeWith()"}},"mergeDeep":{"name":"mergeDeep","label":"mergeDeep()","id":"mergeDeep()","group":"Persistent changes","signatures":[{"line":1793,"typeParams":["KC","VC"],"params":[{"name":"collections","type":{"k":12,"name":"Array","args":[{"k":12,"name":"Iterable","args":[{"k":15,"types":[{"k":11,"param":"KC"},{"k":11,"param":"VC"}]}]}]},"varArgs":true}],"type":{"k":12,"name":"OrderedMap","args":[{"k":13,"types":[{"k":11,"param":"K"},{"k":11,"param":"KC"}]},{"k":13,"types":[{"k":11,"param":"V"},{"k":11,"param":"VC"}]}],"url":"/docs/latest@main/OrderedMap"}},{"line":1796,"typeParams":["C"],"params":[{"name":"collections","type":{"k":12,"name":"Array","args":[{"k":8,"members":[{"index":true,"params":[{"name":"key","type":{"k":7}}],"type":{"k":11,"param":"C"}}]}]},"varArgs":true}],"type":{"k":12,"name":"OrderedMap","args":[{"k":13,"types":[{"k":11,"param":"K"},{"k":7}]},{"k":13,"types":[{"k":11,"param":"V"},{"k":11,"param":"C"}]}],"url":"/docs/latest@main/OrderedMap"}}],"url":"/docs/latest@main/OrderedMap#mergeDeep()","overrides":{"interface":"Map","label":"mergeDeep()","url":"/docs/latest@main/Map#mergeDeep()"}},"map":{"name":"map","label":"map()","id":"map()","group":"Sequence algorithms","doc":{"synopsis":"<p>Returns a new OrderedMap with values passed through a\n<code><span class=\"t param\">mapper</span></code> function.</p>\n","description":"$14","notes":[]},"signatures":[{"line":1812,"typeParams":["M"],"params":[{"name":"mapper","type":{"k":10,"params":[{"name":"value","type":{"k":11,"param":"V"}},{"name":"key","type":{"k":11,"param":"K"}},{"name":"iter","type":{"k":3}}],"type":{"k":11,"param":"M"}}},{"name":"context","type":{"k":2},"optional":true}],"type":{"k":12,"name":"OrderedMap","args":[{"k":11,"param":"K"},{"k":11,"param":"M"}],"url":"/docs/latest@main/OrderedMap"}}],"url":"/docs/latest@main/OrderedMap#map()","overrides":{"interface":"Map","label":"map()","url":"/docs/latest@main/Map#map()"}},"mapKeys":{"name":"mapKeys","label":"mapKeys()","id":"mapKeys()","group":"Sequence algorithms","doc":{"synopsis":"","description":"","notes":[{"name":"see","body":"<p>Collection.Keyed.mapKeys</p>\n"}]},"signatures":[{"line":1820,"typeParams":["M"],"params":[{"name":"mapper","type":{"k":10,"params":[{"name":"key","type":{"k":11,"param":"K"}},{"name":"value","type":{"k":11,"param":"V"}},{"name":"iter","type":{"k":3}}],"type":{"k":11,"param":"M"}}},{"name":"context","type":{"k":2},"optional":true}],"type":{"k":12,"name":"OrderedMap","args":[{"k":11,"param":"M"},{"k":11,"param":"V"}],"url":"/docs/latest@main/OrderedMap"}}],"url":"/docs/latest@main/OrderedMap#mapKeys()","overrides":{"interface":"Map","label":"mapKeys()","url":"/docs/latest@main/Map#mapKeys()"}},"mapEntries":{"name":"mapEntries","label":"mapEntries()","id":"mapEntries()","group":"Sequence algorithms","doc":{"synopsis":"","description":"","notes":[{"name":"see","body":"<p>Collection.Keyed.mapEntries</p>\n"}]},"signatures":[{"line":1828,"typeParams":["KM","VM"],"params":[{"name":"mapper","type":{"k":10,"params":[{"name":"entry","type":{"k":15,"types":[{"k":11,"param":"K"},{"k":11,"param":"V"}]}},{"name":"index","type":{"k":6}},{"name":"iter","type":{"k":3}}],"type":{"k":13,"types":[{"k":15,"types":[{"k":11,"param":"KM"},{"k":11,"param":"VM"}]},{"k":4}]}}},{"name":"context","type":{"k":2},"optional":true}],"type":{"k":12,"name":"OrderedMap","args":[{"k":11,"param":"KM"},{"k":11,"param":"VM"}],"url":"/docs/latest@main/OrderedMap"}}],"url":"/docs/latest@main/OrderedMap#mapEntries()","overrides":{"interface":"Map","label":"mapEntries()","url":"/docs/latest@main/Map#mapEntries()"}},"flatMap":{"name":"flatMap","label":"flatMap()","id":"flatMap()","group":"Sequence algorithms","doc":{"synopsis":"<p>Flat-maps the OrderedMap, returning a new OrderedMap.</p>\n","description":"<p>Similar to <code>data<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token operator\">...</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">flatten</span><span class=\"token punctuation\">(</span><span class=\"token primitive\">true</span><span class=\"token punctuation\">)</span></code>.</p>\n","notes":[]},"signatures":[{"line":1842,"typeParams":["KM","VM"],"params":[{"name":"mapper","type":{"k":10,"params":[{"name":"value","type":{"k":11,"param":"V"}},{"name":"key","type":{"k":11,"param":"K"}},{"name":"iter","type":{"k":3}}],"type":{"k":12,"name":"Iterable","args":[{"k":15,"types":[{"k":11,"param":"KM"},{"k":11,"param":"VM"}]}]}}},{"name":"context","type":{"k":2},"optional":true}],"type":{"k":12,"name":"OrderedMap","args":[{"k":11,"param":"KM"},{"k":11,"param":"VM"}],"url":"/docs/latest@main/OrderedMap"}}],"url":"/docs/latest@main/OrderedMap#flatMap()","overrides":{"interface":"Map","label":"flatMap()","url":"/docs/latest@main/Map#flatMap()"}},"filter":{"name":"filter","label":"filter()","id":"filter()","group":"Sequence algorithms","signatures":[{"line":1854,"typeParams":["F"],"params":[{"name":"predicate","type":{"k":10,"params":[{"name":"value","type":{"k":11,"param":"V"}},{"name":"key","type":{"k":11,"param":"K"}},{"name":"iter","type":{"k":3}}],"type":{"k":5}}},{"name":"context","type":{"k":2},"optional":true}],"type":{"k":12,"name":"OrderedMap","args":[{"k":11,"param":"K"},{"k":11,"param":"F"}],"url":"/docs/latest@main/OrderedMap"}},{"line":1858,"params":[{"name":"predicate","type":{"k":10,"params":[{"name":"value","type":{"k":11,"param":"V"}},{"name":"key","type":{"k":11,"param":"K"}},{"name":"iter","type":{"k":3}}],"type":{"k":2}}},{"name":"context","type":{"k":2},"optional":true}],"type":{"k":3}}],"url":"/docs/latest@main/OrderedMap#filter()","overrides":{"interface":"Map","label":"filter()","url":"/docs/latest@main/Map#filter()"}},"partition":{"name":"partition","label":"partition()","id":"partition()","group":"Sequence algorithms","signatures":[{"line":1867,"typeParams":["F","C"],"params":[{"name":"predicate","type":{"k":10,"params":[{"name":"this","type":{"k":11,"param":"C"}},{"name":"value","type":{"k":11,"param":"V"}},{"name":"key","type":{"k":11,"param":"K"}},{"name":"iter","type":{"k":3}}],"type":{"k":5}}},{"name":"context","type":{"k":11,"param":"C"},"optional":true}],"type":{"k":15,"types":[{"k":12,"name":"OrderedMap","args":[{"k":11,"param":"K"},{"k":11,"param":"V"}]},{"k":12,"name":"OrderedMap","args":[{"k":11,"param":"K"},{"k":11,"param":"F"}]}]}},{"line":1871,"typeParams":["C"],"params":[{"name":"predicate","type":{"k":10,"params":[{"name":"this","type":{"k":11,"param":"C"}},{"name":"value","type":{"k":11,"param":"V"}},{"name":"key","type":{"k":11,"param":"K"}},{"name":"iter","type":{"k":3}}],"type":{"k":2}}},{"name":"context","type":{"k":11,"param":"C"},"optional":true}],"type":{"k":15,"types":[{"k":3},{"k":3}]}}],"url":"/docs/latest@main/OrderedMap#partition()","overrides":{"interface":"Map","label":"partition()","url":"/docs/latest@main/Map#partition()"}},"flip":{"name":"flip","label":"flip()","id":"flip()","group":"Sequence algorithms","doc":{"synopsis":"","description":"","notes":[{"name":"see","body":"<p>Collection.Keyed.flip</p>\n"}]},"signatures":[{"line":1879,"type":{"k":12,"name":"OrderedMap","args":[{"k":11,"param":"V"},{"k":11,"param":"K"}],"url":"/docs/latest@main/OrderedMap"}}],"url":"/docs/latest@main/OrderedMap#flip()","overrides":{"interface":"Map","label":"flip()","url":"/docs/latest@main/Map#flip()"}},"delete":{"name":"delete","label":"delete()","id":"delete()","group":"Persistent changes","doc":{"synopsis":"<p>Returns a new Map which excludes this <code><span class=\"t param\">key</span></code>.</p>\n","description":"$15","notes":[{"name":"alias","body":"remove"}]},"signatures":[{"line":1008,"params":[{"name":"key","type":{"k":11,"param":"K"}}],"type":{"k":3}}],"url":"/docs/latest@main/OrderedMap#delete()","inherited":{"interface":"Map","label":"delete()","url":"/docs/latest@main/Map#delete()"}},"deleteAll":{"name":"deleteAll","label":"deleteAll()","id":"deleteAll()","group":"Persistent changes","doc":{"synopsis":"<p>Returns a new Map which excludes the provided <code><span class=\"t param\">keys</span></code>.</p>\n","description":"$16","notes":[{"name":"alias","body":"removeAll"}]},"signatures":[{"line":1026,"params":[{"name":"keys","type":{"k":12,"name":"Iterable","args":["$6:props:def:interface:members:delete:signatures:0:params:0:type"]}}],"type":{"k":3}}],"url":"/docs/latest@main/OrderedMap#deleteAll()","inherited":{"interface":"Map","label":"deleteAll()","url":"/docs/latest@main/Map#deleteAll()"}},"clear":{"name":"clear","label":"clear()","id":"clear()","group":"Persistent changes","doc":{"synopsis":"<p>Returns a new Map containing no keys or values.</p>\n","description":"$17","notes":[]},"signatures":[{"line":1041,"type":{"k":3}}],"url":"/docs/latest@main/OrderedMap#clear()","inherited":{"interface":"Map","label":"clear()","url":"/docs/latest@main/Map#clear()"}},"update":{"name":"update","label":"update()","id":"update()","group":"Persistent changes","signatures":[{"line":1145,"params":[{"name":"key","type":"$6:props:def:interface:members:delete:signatures:0:params:0:type"},{"name":"notSetValue","type":{"k":11,"param":"V"}},{"name":"updater","type":{"k":10,"params":[{"name":"value","type":"$6:props:def:interface:members:update:signatures:0:params:1:type"}],"type":"$6:props:def:interface:members:update:signatures:0:params:1:type"}}],"type":{"k":3}},{"line":1146,"params":[{"name":"key","type":"$6:props:def:interface:members:delete:signatures:0:params:0:type"},{"name":"updater","type":{"k":10,"params":[{"name":"value","type":{"k":13,"types":["$6:props:def:interface:members:update:signatures:0:params:1:type",{"k":4}]}}],"type":{"k":13,"types":["$6:props:def:interface:members:update:signatures:0:params:1:type",{"k":4}]}}}],"type":{"k":3}},{"line":1147,"typeParams":["R"],"params":[{"name":"updater","type":{"k":10,"params":[{"name":"value","type":{"k":3}}],"type":{"k":11,"param":"R"}}}],"type":{"k":11,"param":"R"}}],"url":"/docs/latest@main/OrderedMap#update()","inherited":{"interface":"Map","label":"update()","url":"/docs/latest@main/Map#update()"}},"mergeDeepWith":{"name":"mergeDeepWith","label":"mergeDeepWith()","id":"mergeDeepWith()","group":"Persistent changes","doc":{"synopsis":"<p>Like <code><a href=\"/docs/latest@main/Map#mergeDeep()\">mergeDeep()</a></code>, but when two non-collections or incompatible\ncollections are encountered at the same key, it uses the <code><span class=\"t param\">merger</span></code>\nfunction to determine the resulting value. Collections are considered\nincompatible if they fall into separate categories between keyed,\nindexed, and set-like.</p>\n","description":"$18","notes":[]},"signatures":[{"line":1269,"params":[{"name":"merger","type":{"k":10,"params":[{"name":"oldVal","type":{"k":2}},{"name":"newVal","type":{"k":2}},{"name":"key","type":{"k":2}}],"type":{"k":2}}},{"name":"collections","type":{"k":12,"name":"Array","args":[{"k":13,"types":[{"k":12,"name":"Iterable","args":[{"k":15,"types":["$6:props:def:interface:members:delete:signatures:0:params:0:type","$6:props:def:interface:members:update:signatures:0:params:1:type"]}]},{"k":8,"members":[{"index":true,"params":[{"name":"key","type":{"k":7}}],"type":"$6:props:def:interface:members:update:signatures:0:params:1:type"}]}]}]},"varArgs":true}],"type":{"k":3}}],"url":"/docs/latest@main/OrderedMap#mergeDeepWith()","inherited":{"interface":"Map","label":"mergeDeepWith()","url":"/docs/latest@main/Map#mergeDeepWith()"}},"setIn":{"name":"setIn","label":"setIn()","id":"setIn()","group":"Deep persistent changes","doc":{"synopsis":"<p>Returns a new Map having set <code><span class=\"t param\">value</span></code> at this <code><span class=\"t param\">keyPath</span></code>. If any keys in\n<code><span class=\"t param\">keyPath</span></code> do not exist, a new immutable Map will be created at that key.</p>\n","description":"$19","notes":[]},"signatures":[{"line":1342,"params":[{"name":"keyPath","type":{"k":12,"name":"Iterable","args":[{"k":2}]}},{"name":"value","type":{"k":2}}],"type":{"k":3}}],"url":"/docs/latest@main/OrderedMap#setIn()","inherited":{"interface":"Map","label":"setIn()","url":"/docs/latest@main/Map#setIn()"}},"deleteIn":{"name":"deleteIn","label":"deleteIn()","id":"deleteIn()","group":"Deep persistent changes","doc":{"synopsis":"<p>Returns a new Map having removed the value at this <code><span class=\"t param\">keyPath</span></code>. If any keys\nin <code><span class=\"t param\">keyPath</span></code> do not exist, no change will occur.</p>\n","description":"<p>Note: <code><a href=\"/docs/latest@main/Map#deleteIn()\">deleteIn</a></code> can be used in <code><a href=\"/docs/latest@main/Map#withMutations()\">withMutations</a></code>.</p>\n","notes":[{"name":"alias","body":"removeIn"}]},"signatures":[{"line":1352,"params":[{"name":"keyPath","type":{"k":12,"name":"Iterable","args":[{"k":2}]}}],"type":{"k":3}}],"url":"/docs/latest@main/OrderedMap#deleteIn()","inherited":{"interface":"Map","label":"deleteIn()","url":"/docs/latest@main/Map#deleteIn()"}},"updateIn":{"name":"updateIn","label":"updateIn()","id":"updateIn()","group":"Deep persistent changes","signatures":[{"line":1431,"params":[{"name":"keyPath","type":{"k":12,"name":"Iterable","args":[{"k":2}]}},{"name":"notSetValue","type":{"k":2}},{"name":"updater","type":{"k":10,"params":[{"name":"value","type":{"k":2}}],"type":{"k":2}}}],"type":{"k":3}},{"line":1436,"params":[{"name":"keyPath","type":{"k":12,"name":"Iterable","args":[{"k":2}]}},{"name":"updater","type":{"k":10,"params":[{"name":"value","type":{"k":2}}],"type":{"k":2}}}],"type":{"k":3}}],"url":"/docs/latest@main/OrderedMap#updateIn()","inherited":{"interface":"Map","label":"updateIn()","url":"/docs/latest@main/Map#updateIn()"}},"mergeIn":{"name":"mergeIn","label":"mergeIn()","id":"mergeIn()","group":"Deep persistent changes","doc":{"synopsis":"<p>A combination of <code><a href=\"/docs/latest@main/Map#updateIn()\">updateIn</a></code> and <code><a href=\"/docs/latest@main/Map#merge()\">merge</a></code>, returning a new Map, but\nperforming the merge at a point arrived at by following the keyPath.\nIn other words, these two lines are equivalent:</p>\n","description":"$1a","notes":[]},"signatures":[{"line":1453,"params":[{"name":"keyPath","type":{"k":12,"name":"Iterable","args":[{"k":2}]}},{"name":"collections","type":{"k":12,"name":"Array","args":[{"k":2}]},"varArgs":true}],"type":{"k":3}}],"url":"/docs/latest@main/OrderedMap#mergeIn()","inherited":{"interface":"Map","label":"mergeIn()","url":"/docs/latest@main/Map#mergeIn()"}},"mergeDeepIn":{"name":"mergeDeepIn","label":"mergeDeepIn()","id":"mergeDeepIn()","group":"Deep persistent changes","doc":{"synopsis":"<p>A combination of <code><a href=\"/docs/latest@main/Map#updateIn()\">updateIn</a></code> and <code><a href=\"/docs/latest@main/Map#mergeDeep()\">mergeDeep</a></code>, returning a new Map, but\nperforming the deep merge at a point arrived at by following the keyPath.\nIn other words, these two lines are equivalent:</p>\n","description":"$1b","notes":[]},"signatures":[{"line":1467,"params":[{"name":"keyPath","type":{"k":12,"name":"Iterable","args":[{"k":2}]}},{"name":"collections","type":{"k":12,"name":"Array","args":[{"k":2}]},"varArgs":true}],"type":{"k":3}}],"url":"/docs/latest@main/OrderedMap#mergeDeepIn()","inherited":{"interface":"Map","label":"mergeDeepIn()","url":"/docs/latest@main/Map#mergeDeepIn()"}},"withMutations":{"name":"withMutations","label":"withMutations()","id":"withMutations()","group":"Transient changes","doc":{"synopsis":"<p>Every time you call one of the above functions, a new immutable Map is\ncreated. If a pure function calls a number of these to produce a final\nreturn value, then a penalty on performance and memory has been paid by\ncreating all of the intermediate immutable Maps.</p>\n","description":"$1c","notes":[]},"signatures":[{"line":1502,"params":[{"name":"mutator","type":{"k":10,"params":[{"name":"mutable","type":{"k":3}}],"type":{"k":2}}}],"type":{"k":3}}],"url":"/docs/latest@main/OrderedMap#withMutations()","inherited":{"interface":"Map","label":"withMutations()","url":"/docs/latest@main/Map#withMutations()"}},"asMutable":{"name":"asMutable","label":"asMutable()","id":"asMutable()","group":"Transient changes","doc":{"synopsis":"<p>Another way to avoid creation of intermediate Immutable maps is to create\na mutable copy of this collection. Mutable copies <em>always</em> return <code><span class=\"token var\">this</span></code>,\nand thus shouldn&#39;t be used for equality. Your function should never return\na mutable copy of a collection, only use it internally to create a new\ncollection.</p>\n","description":"<p>If possible, use <code><a href=\"/docs/latest@main/Map#withMutations()\">withMutations</a></code> to work with temporary mutable copies as\nit provides an easier to use API and considers many common optimizations.</p>\n<p>Note: if the collection is already mutable, <code><a href=\"/docs/latest@main/Map#asMutable()\">asMutable</a></code> returns itself.</p>\n<p>Note: Not all methods can be used on a mutable collection or within\n<code><a href=\"/docs/latest@main/Map#withMutations()\">withMutations</a></code>! Read the documentation for each method to see if it\nis safe to use in <code><a href=\"/docs/latest@main/Map#withMutations()\">withMutations</a></code>.</p>\n","notes":[{"name":"see","body":"<p><code><a href=\"/docs/latest@main/Map#asImmutable()\">Map#asImmutable</a></code></p>\n"}]},"signatures":[{"line":1522,"type":{"k":3}}],"url":"/docs/latest@main/OrderedMap#asMutable()","inherited":{"interface":"Map","label":"asMutable()","url":"/docs/latest@main/Map#asMutable()"}},"wasAltered":{"name":"wasAltered","label":"wasAltered()","id":"wasAltered()","group":"Transient changes","doc":{"synopsis":"<p>Returns true if this is a mutable copy (see <code><a href=\"/docs/latest@main/Map#asMutable()\">asMutable()</a></code>) and mutative\nalterations have been applied.</p>\n","description":"","notes":[{"name":"see","body":"<p><code><a href=\"/docs/latest@main/Map#asMutable()\">Map#asMutable</a></code></p>\n"}]},"signatures":[{"line":1530,"type":{"k":5}}],"url":"/docs/latest@main/OrderedMap#wasAltered()","inherited":{"interface":"Map","label":"wasAltered()","url":"/docs/latest@main/Map#wasAltered()"}},"asImmutable":{"name":"asImmutable","label":"asImmutable()","id":"asImmutable()","group":"Transient changes","doc":{"synopsis":"<p>The yin to <code><a href=\"/docs/latest@main/Map#asMutable()\">asMutable</a></code>&#39;s yang. Because it applies to mutable collections,\nthis operation is <em>mutable</em> and may return itself (though may not\nreturn itself, i.e. if the result is an empty collection). Once\nperformed, the original mutable copy must no longer be mutated since it\nmay be the immutable result.</p>\n","description":"<p>If possible, use <code><a href=\"/docs/latest@main/Map#withMutations()\">withMutations</a></code> to work with temporary mutable copies as\nit provides an easier to use API and considers many common optimizations.</p>\n","notes":[{"name":"see","body":"<p><code><a href=\"/docs/latest@main/Map#asMutable()\">Map#asMutable</a></code></p>\n"}]},"signatures":[{"line":1544,"type":{"k":3}}],"url":"/docs/latest@main/OrderedMap#asImmutable()","inherited":{"interface":"Map","label":"asImmutable()","url":"/docs/latest@main/Map#asImmutable()"}},"sort":{"name":"sort","label":"sort()","id":"sort()","group":"Sequence algorithms","doc":{"synopsis":"<p>Returns an OrderedMap of the same type which includes the same entries,\nstably sorted by using a <code><span class=\"t param\">comparator</span></code>.</p>\n","description":"$1d","notes":[]},"signatures":[{"line":1655,"params":[{"name":"comparator","type":{"k":12,"name":"Comparator","args":["$6:props:def:interface:members:update:signatures:0:params:1:type"]},"optional":true}],"type":{"k":14,"types":[{"k":3},{"k":12,"name":"OrderedMap","args":["$6:props:def:interface:members:delete:signatures:0:params:0:type","$6:props:def:interface:members:update:signatures:0:params:1:type"]}]}}],"url":"/docs/latest@main/OrderedMap#sort()","inherited":{"interface":"Map","label":"sort()","url":"/docs/latest@main/Map#sort()"}},"sortBy":{"name":"sortBy","label":"sortBy()","id":"sortBy()","group":"Sequence algorithms","doc":{"synopsis":"<p>Like <code><a href=\"/docs/latest@main/Map#sort()\">sort</a></code>, but also accepts a <code><span class=\"t param\">comparatorValueMapper</span></code> which allows for\nsorting by more sophisticated means:</p>\n","description":"$1e","notes":[]},"signatures":[{"line":1678,"typeParams":["C"],"params":[{"name":"comparatorValueMapper","type":{"k":10,"params":[{"name":"value","type":"$6:props:def:interface:members:update:signatures:0:params:1:type"},{"name":"key","type":"$6:props:def:interface:members:delete:signatures:0:params:0:type"},{"name":"iter","type":{"k":3}}],"type":{"k":11,"param":"C"}}},{"name":"comparator","type":{"k":10,"params":[{"name":"valueA","type":{"k":11,"param":"C"}},{"name":"valueB","type":{"k":11,"param":"C"}}],"type":{"k":6}},"optional":true}],"type":{"k":14,"types":[{"k":3},{"k":12,"name":"OrderedMap","args":["$6:props:def:interface:members:delete:signatures:0:params:0:type","$6:props:def:interface:members:update:signatures:0:params:1:type"]}]}}],"url":"/docs/latest@main/OrderedMap#sortBy()","inherited":{"interface":"Map","label":"sortBy()","url":"/docs/latest@main/Map#sortBy()"}},"toJS":{"name":"toJS","label":"toJS()","id":"toJS()","group":"Conversion to JavaScript types","doc":{"synopsis":"<p>Deeply converts this Keyed collection to equivalent native JavaScript Object.</p>\n","description":"<p>Converts keys to Strings.</p>\n","notes":[]},"signatures":[{"line":3763,"type":{"k":8,"members":[{"index":true,"params":[{"name":"key","type":{"k":7}}],"type":{"k":12,"name":"DeepCopy","args":["$6:props:def:interface:members:update:signatures:0:params:1:type"]}}]}}],"url":"/docs/latest@main/OrderedMap#toJS()","inherited":{"interface":"Collection.Keyed","label":"toJS()","url":"/docs/latest@main/Collection.Keyed#toJS()"}},"toJSON":{"name":"toJSON","label":"toJSON()","id":"toJSON()","group":"Conversion to JavaScript types","doc":{"synopsis":"<p>Shallowly converts this Keyed collection to equivalent native JavaScript Object.</p>\n","description":"<p>Converts keys to Strings.</p>\n","notes":[]},"signatures":[{"line":3770,"type":{"k":8,"members":[{"index":true,"params":[{"name":"key","type":{"k":7}}],"type":"$6:props:def:interface:members:update:signatures:0:params:1:type"}]}}],"url":"/docs/latest@main/OrderedMap#toJSON()","inherited":{"interface":"Collection.Keyed","label":"toJSON()","url":"/docs/latest@main/Collection.Keyed#toJSON()"}},"toArray":{"name":"toArray","label":"toArray()","id":"toArray()","group":"Conversion to JavaScript types","doc":{"synopsis":"<p>Shallowly converts this collection to an Array.</p>\n","description":"","notes":[]},"signatures":[{"line":3775,"type":{"k":12,"name":"Array","args":[{"k":15,"types":["$6:props:def:interface:members:delete:signatures:0:params:0:type","$6:props:def:interface:members:update:signatures:0:params:1:type"]}]}}],"url":"/docs/latest@main/OrderedMap#toArray()","inherited":{"interface":"Collection.Keyed","label":"toArray()","url":"/docs/latest@main/Collection.Keyed#toArray()"}},"toSeq":{"name":"toSeq","label":"toSeq()","id":"toSeq()","group":"Conversion to Seq","doc":{"synopsis":"<p>Returns Seq.Keyed.</p>\n","description":"","notes":[]},"signatures":[{"line":3781,"type":{"k":12,"name":"Seq.Keyed","args":["$6:props:def:interface:members:delete:signatures:0:params:0:type","$6:props:def:interface:members:update:signatures:0:params:1:type"],"url":"/docs/latest@main/Seq.Keyed"}}],"url":"/docs/latest@main/OrderedMap#toSeq()","inherited":{"interface":"Collection.Keyed","label":"toSeq()","url":"/docs/latest@main/Collection.Keyed#toSeq()"}},"concat":{"name":"concat","label":"concat()","id":"concat()","group":"Sequence functions","signatures":[{"line":3801,"typeParams":["KC","VC"],"params":[{"name":"collections","type":{"k":12,"name":"Array","args":[{"k":12,"name":"Iterable","args":[{"k":15,"types":[{"k":11,"param":"KC"},{"k":11,"param":"VC"}]}]}]},"varArgs":true}],"type":{"k":12,"name":"Collection.Keyed","args":[{"k":13,"types":["$6:props:def:interface:members:delete:signatures:0:params:0:type",{"k":11,"param":"KC"}]},{"k":13,"types":["$6:props:def:interface:members:update:signatures:0:params:1:type",{"k":11,"param":"VC"}]}],"url":"/docs/latest@main/Collection.Keyed"}},{"line":3804,"typeParams":["C"],"params":[{"name":"collections","type":{"k":12,"name":"Array","args":[{"k":8,"members":[{"index":true,"params":[{"name":"key","type":{"k":7}}],"type":{"k":11,"param":"C"}}]}]},"varArgs":true}],"type":{"k":12,"name":"Collection.Keyed","args":[{"k":13,"types":["$6:props:def:interface:members:delete:signatures:0:params:0:type",{"k":7}]},{"k":13,"types":["$6:props:def:interface:members:update:signatures:0:params:1:type",{"k":11,"param":"C"}]}],"url":"/docs/latest@main/Collection.Keyed"}}],"url":"/docs/latest@main/OrderedMap#concat()","inherited":{"interface":"Collection.Keyed","label":"concat()","url":"/docs/latest@main/Collection.Keyed#concat()"}},"[Symbol.iterator]":{"name":"[Symbol.iterator]","label":"[Symbol.iterator]()","id":"[Symbol.iterator]()","group":"Sequence functions","signatures":[{"line":3911,"type":{"k":12,"name":"IterableIterator","args":[{"k":15,"types":["$6:props:def:interface:members:delete:signatures:0:params:0:type","$6:props:def:interface:members:update:signatures:0:params:1:type"]}]}}],"url":"/docs/latest@main/OrderedMap#[Symbol.iterator]()","inherited":{"interface":"Collection.Keyed","label":"[Symbol.iterator]()","url":"/docs/latest@main/Collection.Keyed#[Symbol.iterator]()"}},"equals":{"name":"equals","label":"equals()","id":"equals()","group":"Value equality","doc":{"synopsis":"<p>True if this and the other Collection have value equality, as defined\nby <code><a href=\"/docs/latest@main/is()\">Immutable.is()</a></code>.</p>\n","description":"<p>Note: This is equivalent to <code><span class=\"token qualifier\">Immutable</span><span class=\"token punctuation\">.</span><span class=\"token function\">is</span><span class=\"token punctuation\">(</span><span class=\"token var\">this</span><span class=\"token punctuation\">,</span> other<span class=\"token punctuation\">)</span></code>, but provided to\nallow for chained expressions.</p>\n","notes":[]},"signatures":[{"line":4383,"params":[{"name":"other","type":{"k":2}}],"type":{"k":5}}],"url":"/docs/latest@main/OrderedMap#equals()","inherited":{"interface":"Collection","label":"equals()","url":"/docs/latest@main/Collection#equals()"}},"hashCode":{"name":"hashCode","label":"hashCode()","id":"hashCode()","group":"Value equality","doc":{"synopsis":"<p>Computes and returns the hashed identity for this Collection.</p>\n","description":"$1f","notes":[]},"signatures":[{"line":4409,"type":{"k":6}}],"url":"/docs/latest@main/OrderedMap#hashCode()","inherited":{"interface":"Collection","label":"hashCode()","url":"/docs/latest@main/Collection#hashCode()"}},"get":{"name":"get","label":"get()","id":"get()","group":"Reading values","signatures":[{"line":4421,"typeParams":["NSV"],"params":[{"name":"key","type":"$6:props:def:interface:members:delete:signatures:0:params:0:type"},{"name":"notSetValue","type":{"k":11,"param":"NSV"}}],"type":{"k":13,"types":["$6:props:def:interface:members:update:signatures:0:params:1:type",{"k":11,"param":"NSV"}]}},{"line":4422,"params":[{"name":"key","type":"$6:props:def:interface:members:delete:signatures:0:params:0:type"}],"type":{"k":13,"types":["$6:props:def:interface:members:update:signatures:0:params:1:type",{"k":4}]}}],"url":"/docs/latest@main/OrderedMap#get()","inherited":{"interface":"Collection","label":"get()","url":"/docs/latest@main/Collection#get()"}},"has":{"name":"has","label":"has()","id":"has()","group":"Reading values","doc":{"synopsis":"<p>True if a key exists within this <code><a href=\"/docs/latest@main/Collection\">Collection</a></code>, using <code><a href=\"/docs/latest@main/is()\">Immutable.is</a></code>\nto determine equality</p>\n","description":"","notes":[]},"signatures":[{"line":4428,"params":[{"name":"key","type":"$6:props:def:interface:members:delete:signatures:0:params:0:type"}],"type":{"k":5}}],"url":"/docs/latest@main/OrderedMap#has()","inherited":{"interface":"Collection","label":"has()","url":"/docs/latest@main/Collection#has()"}},"includes":{"name":"includes","label":"includes()","id":"includes()","group":"Reading values","doc":{"synopsis":"<p>True if a value exists within this <code><a href=\"/docs/latest@main/Collection\">Collection</a></code>, using <code><a href=\"/docs/latest@main/is()\">Immutable.is</a></code>\nto determine equality</p>\n","description":"","notes":[{"name":"alias","body":"contains"}]},"signatures":[{"line":4435,"params":[{"name":"value","type":"$6:props:def:interface:members:update:signatures:0:params:1:type"}],"type":{"k":5}}],"url":"/docs/latest@main/OrderedMap#includes()","inherited":{"interface":"Collection","label":"includes()","url":"/docs/latest@main/Collection#includes()"}},"first":{"name":"first","label":"first()","id":"first()","group":"Reading values","signatures":[{"line":4444,"typeParams":["NSV"],"params":[{"name":"notSetValue","type":{"k":11,"param":"NSV"}}],"type":{"k":13,"types":["$6:props:def:interface:members:update:signatures:0:params:1:type",{"k":11,"param":"NSV"}]}},{"line":4445,"type":{"k":13,"types":["$6:props:def:interface:members:update:signatures:0:params:1:type",{"k":4}]}}],"url":"/docs/latest@main/OrderedMap#first()","inherited":{"interface":"Collection","label":"first()","url":"/docs/latest@main/Collection#first()"}},"last":{"name":"last","label":"last()","id":"last()","group":"Reading values","signatures":[{"line":4453,"typeParams":["NSV"],"params":[{"name":"notSetValue","type":{"k":11,"param":"NSV"}}],"type":{"k":13,"types":["$6:props:def:interface:members:update:signatures:0:params:1:type",{"k":11,"param":"NSV"}]}},{"line":4454,"type":{"k":13,"types":["$6:props:def:interface:members:update:signatures:0:params:1:type",{"k":4}]}}],"url":"/docs/latest@main/OrderedMap#last()","inherited":{"interface":"Collection","label":"last()","url":"/docs/latest@main/Collection#last()"}},"getIn":{"name":"getIn","label":"getIn()","id":"getIn()","group":"Reading deep values","doc":{"synopsis":"<p>Returns the value found by following a path of keys or indices through\nnested Collections.</p>\n","description":"$20","notes":[]},"signatures":[{"line":4479,"params":[{"name":"searchKeyPath","type":{"k":12,"name":"Iterable","args":[{"k":2}]}},{"name":"notSetValue","type":{"k":2},"optional":true}],"type":{"k":2}}],"url":"/docs/latest@main/OrderedMap#getIn()","inherited":{"interface":"Collection","label":"getIn()","url":"/docs/latest@main/Collection#getIn()"}},"hasIn":{"name":"hasIn","label":"hasIn()","id":"hasIn()","group":"Reading deep values","doc":{"synopsis":"<p>True if the result of following a path of keys or indices through nested\nCollections results in a set value.</p>\n","description":"","notes":[]},"signatures":[{"line":4485,"params":[{"name":"searchKeyPath","type":{"k":12,"name":"Iterable","args":[{"k":2}]}}],"type":{"k":5}}],"url":"/docs/latest@main/OrderedMap#hasIn()","inherited":{"interface":"Collection","label":"hasIn()","url":"/docs/latest@main/Collection#hasIn()"}},"toObject":{"name":"toObject","label":"toObject()","id":"toObject()","group":"Conversion to JavaScript types","doc":{"synopsis":"<p>Shallowly converts this Collection to an Object.</p>\n","description":"<p>Converts keys to Strings.</p>\n","notes":[]},"signatures":[{"line":4543,"type":{"k":8,"members":[{"index":true,"params":[{"name":"key","type":{"k":7}}],"type":"$6:props:def:interface:members:update:signatures:0:params:1:type"}]}}],"url":"/docs/latest@main/OrderedMap#toObject()","inherited":{"interface":"Collection","label":"toObject()","url":"/docs/latest@main/Collection#toObject()"}},"toMap":{"name":"toMap","label":"toMap()","id":"toMap()","group":"Conversion to Collections","doc":{"synopsis":"<p>Converts this Collection to a Map, Throws if keys are not hashable.</p>\n","description":"<p>Note: This is equivalent to <code><span class=\"token function\">Map</span><span class=\"token punctuation\">(</span><span class=\"token var\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">toKeyedSeq</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code>, but provided\nfor convenience and to allow for chained expressions.</p>\n","notes":[]},"signatures":[{"line":4553,"type":{"k":12,"name":"Map","args":["$6:props:def:interface:members:delete:signatures:0:params:0:type","$6:props:def:interface:members:update:signatures:0:params:1:type"],"url":"/docs/latest@main/Map"}}],"url":"/docs/latest@main/OrderedMap#toMap()","inherited":{"interface":"Collection","label":"toMap()","url":"/docs/latest@main/Collection#toMap()"}},"toOrderedMap":{"name":"toOrderedMap","label":"toOrderedMap()","id":"toOrderedMap()","group":"Conversion to Collections","doc":{"synopsis":"<p>Converts this Collection to a Map, maintaining the order of iteration.</p>\n","description":"<p>Note: This is equivalent to <code><span class=\"token function\">OrderedMap</span><span class=\"token punctuation\">(</span><span class=\"token var\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">toKeyedSeq</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code>, but\nprovided for convenience and to allow for chained expressions.</p>\n","notes":[]},"signatures":[{"line":4561,"type":{"k":12,"name":"OrderedMap","args":["$6:props:def:interface:members:delete:signatures:0:params:0:type","$6:props:def:interface:members:update:signatures:0:params:1:type"],"url":"/docs/latest@main/OrderedMap"}}],"url":"/docs/latest@main/OrderedMap#toOrderedMap()","inherited":{"interface":"Collection","label":"toOrderedMap()","url":"/docs/latest@main/Collection#toOrderedMap()"}},"toSet":{"name":"toSet","label":"toSet()","id":"toSet()","group":"Conversion to Collections","doc":{"synopsis":"<p>Converts this Collection to a Set, discarding keys. Throws if values\nare not hashable.</p>\n","description":"<p>Note: This is equivalent to <code><a href=\"/docs/latest@main/Set\">Set(this)</a></code>, but provided to allow for\nchained expressions.</p>\n","notes":[]},"signatures":[{"line":4570,"type":{"k":12,"name":"Set","args":["$6:props:def:interface:members:update:signatures:0:params:1:type"],"url":"/docs/latest@main/Set"}}],"url":"/docs/latest@main/OrderedMap#toSet()","inherited":{"interface":"Collection","label":"toSet()","url":"/docs/latest@main/Collection#toSet()"}},"toOrderedSet":{"name":"toOrderedSet","label":"toOrderedSet()","id":"toOrderedSet()","group":"Conversion to Collections","doc":{"synopsis":"<p>Converts this Collection to a Set, maintaining the order of iteration and\ndiscarding keys.</p>\n","description":"<p>Note: This is equivalent to <code><span class=\"token function\">OrderedSet</span><span class=\"token punctuation\">(</span><span class=\"token var\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">valueSeq</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code>, but provided\nfor convenience and to allow for chained expressions.</p>\n","notes":[]},"signatures":[{"line":4579,"type":{"k":12,"name":"OrderedSet","args":["$6:props:def:interface:members:update:signatures:0:params:1:type"],"url":"/docs/latest@main/OrderedSet"}}],"url":"/docs/latest@main/OrderedMap#toOrderedSet()","inherited":{"interface":"Collection","label":"toOrderedSet()","url":"/docs/latest@main/Collection#toOrderedSet()"}},"toList":{"name":"toList","label":"toList()","id":"toList()","group":"Conversion to Collections","doc":{"synopsis":"<p>Converts this Collection to a List, discarding keys.</p>\n","description":"$21","notes":[]},"signatures":[{"line":4597,"type":{"k":12,"name":"List","args":["$6:props:def:interface:members:update:signatures:0:params:1:type"],"url":"/docs/latest@main/List"}}],"url":"/docs/latest@main/OrderedMap#toList()","inherited":{"interface":"Collection","label":"toList()","url":"/docs/latest@main/Collection#toList()"}},"toStack":{"name":"toStack","label":"toStack()","id":"toStack()","group":"Conversion to Collections","doc":{"synopsis":"<p>Converts this Collection to a Stack, discarding keys. Throws if values\nare not hashable.</p>\n","description":"<p>Note: This is equivalent to <code><a href=\"/docs/latest@main/Stack\">Stack(this)</a></code>, but provided to allow for\nchained expressions.</p>\n","notes":[]},"signatures":[{"line":4606,"type":{"k":12,"name":"Stack","args":["$6:props:def:interface:members:update:signatures:0:params:1:type"],"url":"/docs/latest@main/Stack"}}],"url":"/docs/latest@main/OrderedMap#toStack()","inherited":{"interface":"Collection","label":"toStack()","url":"/docs/latest@main/Collection#toStack()"}},"toKeyedSeq":{"name":"toKeyedSeq","label":"toKeyedSeq()","id":"toKeyedSeq()","group":"Conversion to Seq","doc":{"synopsis":"<p>Returns a Seq.Keyed from this Collection where indices are treated as keys.</p>\n","description":"$22","notes":[]},"signatures":[{"line":4638,"type":{"k":12,"name":"Seq.Keyed","args":["$6:props:def:interface:members:delete:signatures:0:params:0:type","$6:props:def:interface:members:update:signatures:0:params:1:type"],"url":"/docs/latest@main/Seq.Keyed"}}],"url":"/docs/latest@main/OrderedMap#toKeyedSeq()","inherited":{"interface":"Collection","label":"toKeyedSeq()","url":"/docs/latest@main/Collection#toKeyedSeq()"}},"toIndexedSeq":{"name":"toIndexedSeq","label":"toIndexedSeq()","id":"toIndexedSeq()","group":"Conversion to Seq","doc":{"synopsis":"<p>Returns an Seq.Indexed of the values of this Collection, discarding keys.</p>\n","description":"","notes":[]},"signatures":[{"line":4643,"type":{"k":12,"name":"Seq.Indexed","args":["$6:props:def:interface:members:update:signatures:0:params:1:type"],"url":"/docs/latest@main/Seq.Indexed"}}],"url":"/docs/latest@main/OrderedMap#toIndexedSeq()","inherited":{"interface":"Collection","label":"toIndexedSeq()","url":"/docs/latest@main/Collection#toIndexedSeq()"}},"toSetSeq":{"name":"toSetSeq","label":"toSetSeq()","id":"toSetSeq()","group":"Conversion to Seq","doc":{"synopsis":"<p>Returns a Seq.Set of the values of this Collection, discarding keys.</p>\n","description":"","notes":[]},"signatures":[{"line":4648,"type":{"k":12,"name":"Seq.Set","args":["$6:props:def:interface:members:update:signatures:0:params:1:type"],"url":"/docs/latest@main/Seq.Set"}}],"url":"/docs/latest@main/OrderedMap#toSetSeq()","inherited":{"interface":"Collection","label":"toSetSeq()","url":"/docs/latest@main/Collection#toSetSeq()"}},"keys":{"name":"keys","label":"keys()","id":"keys()","group":"Iterators","doc":{"synopsis":"<p>An iterator of this <code><a href=\"/docs/latest@main/Collection\">Collection</a></code>&#39;s keys.</p>\n","description":"<p>Note: this will return an ES6 iterator which does not support\nImmutable.js sequence algorithms. Use <code><a href=\"/docs/latest@main/List#keySeq()\">keySeq</a></code> instead, if this is\nwhat you want.</p>\n","notes":[]},"signatures":[{"line":4659,"type":{"k":12,"name":"IterableIterator","args":["$6:props:def:interface:members:delete:signatures:0:params:0:type"]}}],"url":"/docs/latest@main/OrderedMap#keys()","inherited":{"interface":"Collection","label":"keys()","url":"/docs/latest@main/Collection#keys()"}},"values":{"name":"values","label":"values()","id":"values()","group":"Iterators","doc":{"synopsis":"<p>An iterator of this <code><a href=\"/docs/latest@main/Collection\">Collection</a></code>&#39;s values.</p>\n","description":"<p>Note: this will return an ES6 iterator which does not support\nImmutable.js sequence algorithms. Use <code><a href=\"/docs/latest@main/List#valueSeq()\">valueSeq</a></code> instead, if this is\nwhat you want.</p>\n","notes":[]},"signatures":[{"line":4668,"type":{"k":12,"name":"IterableIterator","args":["$6:props:def:interface:members:update:signatures:0:params:1:type"]}}],"url":"/docs/latest@main/OrderedMap#values()","inherited":{"interface":"Collection","label":"values()","url":"/docs/latest@main/Collection#values()"}},"entries":{"name":"entries","label":"entries()","id":"entries()","group":"Iterators","doc":{"synopsis":"<p>An iterator of this <code><a href=\"/docs/latest@main/Collection\">Collection</a></code>&#39;s entries as <code><span class=\"token punctuation\">[</span> key<span class=\"token punctuation\">,</span> value <span class=\"token punctuation\">]</span></code> tuples.</p>\n","description":"<p>Note: this will return an ES6 iterator which does not support\nImmutable.js sequence algorithms. Use <code><a href=\"/docs/latest@main/List#entrySeq()\">entrySeq</a></code> instead, if this is\nwhat you want.</p>\n","notes":[]},"signatures":[{"line":4677,"type":{"k":12,"name":"IterableIterator","args":[{"k":15,"types":["$6:props:def:interface:members:delete:signatures:0:params:0:type","$6:props:def:interface:members:update:signatures:0:params:1:type"]}]}}],"url":"/docs/latest@main/OrderedMap#entries()","inherited":{"interface":"Collection","label":"entries()","url":"/docs/latest@main/Collection#entries()"}},"keySeq":{"name":"keySeq","label":"keySeq()","id":"keySeq()","group":"Collections (Seq)","doc":{"synopsis":"<p>Returns a new Seq.Indexed of the keys of this Collection,\ndiscarding values.</p>\n","description":"","notes":[]},"signatures":[{"line":4687,"type":{"k":12,"name":"Seq.Indexed","args":["$6:props:def:interface:members:delete:signatures:0:params:0:type"],"url":"/docs/latest@main/Seq.Indexed"}}],"url":"/docs/latest@main/OrderedMap#keySeq()","inherited":{"interface":"Collection","label":"keySeq()","url":"/docs/latest@main/Collection#keySeq()"}},"valueSeq":{"name":"valueSeq","label":"valueSeq()","id":"valueSeq()","group":"Collections (Seq)","doc":{"synopsis":"<p>Returns an Seq.Indexed of the values of this Collection, discarding keys.</p>\n","description":"","notes":[]},"signatures":[{"line":4692,"type":{"k":12,"name":"Seq.Indexed","args":["$6:props:def:interface:members:update:signatures:0:params:1:type"],"url":"/docs/latest@main/Seq.Indexed"}}],"url":"/docs/latest@main/OrderedMap#valueSeq()","inherited":{"interface":"Collection","label":"valueSeq()","url":"/docs/latest@main/Collection#valueSeq()"}},"entrySeq":{"name":"entrySeq","label":"entrySeq()","id":"entrySeq()","group":"Collections (Seq)","doc":{"synopsis":"<p>Returns a new Seq.Indexed of [key, value] tuples.</p>\n","description":"","notes":[]},"signatures":[{"line":4697,"type":{"k":12,"name":"Seq.Indexed","args":[{"k":15,"types":["$6:props:def:interface:members:delete:signatures:0:params:0:type","$6:props:def:interface:members:update:signatures:0:params:1:type"]}],"url":"/docs/latest@main/Seq.Indexed"}}],"url":"/docs/latest@main/OrderedMap#entrySeq()","inherited":{"interface":"Collection","label":"entrySeq()","url":"/docs/latest@main/Collection#entrySeq()"}},"filterNot":{"name":"filterNot","label":"filterNot()","id":"filterNot()","group":"Sequence algorithms","doc":{"synopsis":"<p>Returns a new Collection of the same type with only the entries for which\nthe <code><span class=\"t param\">predicate</span></code> function returns false.</p>\n","description":"$23","notes":[]},"signatures":[{"line":4765,"params":[{"name":"predicate","type":{"k":10,"params":[{"name":"value","type":"$6:props:def:interface:members:update:signatures:0:params:1:type"},{"name":"key","type":"$6:props:def:interface:members:delete:signatures:0:params:0:type"},{"name":"iter","type":{"k":3}}],"type":{"k":5}}},{"name":"context","type":{"k":2},"optional":true}],"type":{"k":3}}],"url":"/docs/latest@main/OrderedMap#filterNot()","inherited":{"interface":"Collection","label":"filterNot()","url":"/docs/latest@main/Collection#filterNot()"}},"reverse":{"name":"reverse","label":"reverse()","id":"reverse()","group":"Sequence algorithms","doc":{"synopsis":"<p>Returns a new Collection of the same type in reverse order.</p>\n","description":"","notes":[]},"signatures":[{"line":4786,"type":{"k":3}}],"url":"/docs/latest@main/OrderedMap#reverse()","inherited":{"interface":"Collection","label":"reverse()","url":"/docs/latest@main/Collection#reverse()"}},"groupBy":{"name":"groupBy","label":"groupBy()","id":"groupBy()","group":"Sequence algorithms","doc":{"synopsis":"<p>Returns a <code><a href=\"/docs/latest@main/Map\">Map</a></code> of <code><a href=\"/docs/latest@main/Collection\">Collection</a></code>, grouped by the return\nvalue of the <code><span class=\"t param\">grouper</span></code> function.</p>\n","description":"$24","notes":[]},"signatures":[{"line":4874,"typeParams":["G"],"params":[{"name":"grouper","type":{"k":10,"params":[{"name":"value","type":"$6:props:def:interface:members:update:signatures:0:params:1:type"},{"name":"key","type":"$6:props:def:interface:members:delete:signatures:0:params:0:type"},{"name":"iter","type":{"k":3}}],"type":{"k":11,"param":"G"}}},{"name":"context","type":{"k":2},"optional":true}],"type":{"k":12,"name":"Map","args":[{"k":11,"param":"G"},{"k":3}],"url":"/docs/latest@main/Map"}}],"url":"/docs/latest@main/OrderedMap#groupBy()","inherited":{"interface":"Collection","label":"groupBy()","url":"/docs/latest@main/Collection#groupBy()"}},"forEach":{"name":"forEach","label":"forEach()","id":"forEach()","group":"Side effects","doc":{"synopsis":"<p>The <code><span class=\"t param\">sideEffect</span></code> is executed for every entry in the Collection.</p>\n","description":"<p>Unlike <code><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach\" target=\"_blank\" rel=\"noopener\">Array#forEach</a></code>, if any call of <code><span class=\"t param\">sideEffect</span></code> returns\n<code><span class=\"token primitive\">false</span></code>, the iteration will stop. Returns the number of entries iterated\n(including the last iteration which returned false).</p>\n","notes":[]},"signatures":[{"line":4888,"params":[{"name":"sideEffect","type":{"k":10,"params":[{"name":"value","type":"$6:props:def:interface:members:update:signatures:0:params:1:type"},{"name":"key","type":"$6:props:def:interface:members:delete:signatures:0:params:0:type"},{"name":"iter","type":{"k":3}}],"type":{"k":2}}},{"name":"context","type":{"k":2},"optional":true}],"type":{"k":6}}],"url":"/docs/latest@main/OrderedMap#forEach()","inherited":{"interface":"Collection","label":"forEach()","url":"/docs/latest@main/Collection#forEach()"}},"slice":{"name":"slice","label":"slice()","id":"slice()","group":"Creating subsets","doc":{"synopsis":"<p>Returns a new Collection of the same type representing a portion of this\nCollection from start up to but not including end.</p>\n","description":"$25","notes":[]},"signatures":[{"line":4911,"params":[{"name":"begin","type":{"k":6},"optional":true},{"name":"end","type":{"k":6},"optional":true}],"type":{"k":3}}],"url":"/docs/latest@main/OrderedMap#slice()","inherited":{"interface":"Collection","label":"slice()","url":"/docs/latest@main/Collection#slice()"}},"rest":{"name":"rest","label":"rest()","id":"rest()","group":"Creating subsets","doc":{"synopsis":"<p>Returns a new Collection of the same type containing all entries except\nthe first.</p>\n","description":"","notes":[]},"signatures":[{"line":4917,"type":{"k":3}}],"url":"/docs/latest@main/OrderedMap#rest()","inherited":{"interface":"Collection","label":"rest()","url":"/docs/latest@main/Collection#rest()"}},"butLast":{"name":"butLast","label":"butLast()","id":"butLast()","group":"Creating subsets","doc":{"synopsis":"<p>Returns a new Collection of the same type containing all entries except\nthe last.</p>\n","description":"","notes":[]},"signatures":[{"line":4923,"type":{"k":3}}],"url":"/docs/latest@main/OrderedMap#butLast()","inherited":{"interface":"Collection","label":"butLast()","url":"/docs/latest@main/Collection#butLast()"}},"skip":{"name":"skip","label":"skip()","id":"skip()","group":"Creating subsets","doc":{"synopsis":"<p>Returns a new Collection of the same type which excludes the first <code><span class=\"t param\">amount</span></code>\nentries from this Collection.</p>\n","description":"","notes":[]},"signatures":[{"line":4929,"params":[{"name":"amount","type":{"k":6}}],"type":{"k":3}}],"url":"/docs/latest@main/OrderedMap#skip()","inherited":{"interface":"Collection","label":"skip()","url":"/docs/latest@main/Collection#skip()"}},"skipLast":{"name":"skipLast","label":"skipLast()","id":"skipLast()","group":"Creating subsets","doc":{"synopsis":"<p>Returns a new Collection of the same type which excludes the last <code><span class=\"t param\">amount</span></code>\nentries from this Collection.</p>\n","description":"","notes":[]},"signatures":[{"line":4935,"params":[{"name":"amount","type":{"k":6}}],"type":{"k":3}}],"url":"/docs/latest@main/OrderedMap#skipLast()","inherited":{"interface":"Collection","label":"skipLast()","url":"/docs/latest@main/Collection#skipLast()"}},"skipWhile":{"name":"skipWhile","label":"skipWhile()","id":"skipWhile()","group":"Creating subsets","doc":{"synopsis":"<p>Returns a new Collection of the same type which includes entries starting\nfrom when <code><span class=\"t param\">predicate</span></code> first returns false.</p>\n","description":"$26","notes":[]},"signatures":[{"line":4949,"params":[{"name":"predicate","type":{"k":10,"params":[{"name":"value","type":"$6:props:def:interface:members:update:signatures:0:params:1:type"},{"name":"key","type":"$6:props:def:interface:members:delete:signatures:0:params:0:type"},{"name":"iter","type":{"k":3}}],"type":{"k":5}}},{"name":"context","type":{"k":2},"optional":true}],"type":{"k":3}}],"url":"/docs/latest@main/OrderedMap#skipWhile()","inherited":{"interface":"Collection","label":"skipWhile()","url":"/docs/latest@main/Collection#skipWhile()"}},"skipUntil":{"name":"skipUntil","label":"skipUntil()","id":"skipUntil()","group":"Creating subsets","doc":{"synopsis":"<p>Returns a new Collection of the same type which includes entries starting\nfrom when <code><span class=\"t param\">predicate</span></code> first returns true.</p>\n","description":"$27","notes":[]},"signatures":[{"line":4966,"params":[{"name":"predicate","type":{"k":10,"params":[{"name":"value","type":"$6:props:def:interface:members:update:signatures:0:params:1:type"},{"name":"key","type":"$6:props:def:interface:members:delete:signatures:0:params:0:type"},{"name":"iter","type":{"k":3}}],"type":{"k":5}}},{"name":"context","type":{"k":2},"optional":true}],"type":{"k":3}}],"url":"/docs/latest@main/OrderedMap#skipUntil()","inherited":{"interface":"Collection","label":"skipUntil()","url":"/docs/latest@main/Collection#skipUntil()"}},"take":{"name":"take","label":"take()","id":"take()","group":"Creating subsets","doc":{"synopsis":"<p>Returns a new Collection of the same type which includes the first <code><span class=\"t param\">amount</span></code>\nentries from this Collection.</p>\n","description":"","notes":[]},"signatures":[{"line":4975,"params":[{"name":"amount","type":{"k":6}}],"type":{"k":3}}],"url":"/docs/latest@main/OrderedMap#take()","inherited":{"interface":"Collection","label":"take()","url":"/docs/latest@main/Collection#take()"}},"takeLast":{"name":"takeLast","label":"takeLast()","id":"takeLast()","group":"Creating subsets","doc":{"synopsis":"<p>Returns a new Collection of the same type which includes the last <code><span class=\"t param\">amount</span></code>\nentries from this Collection.</p>\n","description":"","notes":[]},"signatures":[{"line":4981,"params":[{"name":"amount","type":{"k":6}}],"type":{"k":3}}],"url":"/docs/latest@main/OrderedMap#takeLast()","inherited":{"interface":"Collection","label":"takeLast()","url":"/docs/latest@main/Collection#takeLast()"}},"takeWhile":{"name":"takeWhile","label":"takeWhile()","id":"takeWhile()","group":"Creating subsets","doc":{"synopsis":"<p>Returns a new Collection of the same type which includes entries from this\nCollection as long as the <code><span class=\"t param\">predicate</span></code> returns true.</p>\n","description":"$28","notes":[]},"signatures":[{"line":4995,"params":[{"name":"predicate","type":{"k":10,"params":[{"name":"value","type":"$6:props:def:interface:members:update:signatures:0:params:1:type"},{"name":"key","type":"$6:props:def:interface:members:delete:signatures:0:params:0:type"},{"name":"iter","type":{"k":3}}],"type":{"k":5}}},{"name":"context","type":{"k":2},"optional":true}],"type":{"k":3}}],"url":"/docs/latest@main/OrderedMap#takeWhile()","inherited":{"interface":"Collection","label":"takeWhile()","url":"/docs/latest@main/Collection#takeWhile()"}},"takeUntil":{"name":"takeUntil","label":"takeUntil()","id":"takeUntil()","group":"Creating subsets","doc":{"synopsis":"<p>Returns a new Collection of the same type which includes entries from this\nCollection as long as the <code><span class=\"t param\">predicate</span></code> returns false.</p>\n","description":"$29","notes":[]},"signatures":[{"line":5012,"params":[{"name":"predicate","type":{"k":10,"params":[{"name":"value","type":"$6:props:def:interface:members:update:signatures:0:params:1:type"},{"name":"key","type":"$6:props:def:interface:members:delete:signatures:0:params:0:type"},{"name":"iter","type":{"k":3}}],"type":{"k":5}}},{"name":"context","type":{"k":2},"optional":true}],"type":{"k":3}}],"url":"/docs/latest@main/OrderedMap#takeUntil()","inherited":{"interface":"Collection","label":"takeUntil()","url":"/docs/latest@main/Collection#takeUntil()"}},"flatten":{"name":"flatten","label":"flatten()","id":"flatten()","group":"Combination","signatures":[{"line":5043,"params":[{"name":"depth","type":{"k":6},"optional":true}],"type":{"k":12,"name":"Collection","args":[{"k":2},{"k":2}],"url":"/docs/latest@main/Collection"}},{"line":5044,"params":[{"name":"shallow","type":{"k":5},"optional":true}],"type":{"k":12,"name":"Collection","args":[{"k":2},{"k":2}],"url":"/docs/latest@main/Collection"}}],"url":"/docs/latest@main/OrderedMap#flatten()","inherited":{"interface":"Collection","label":"flatten()","url":"/docs/latest@main/Collection#flatten()"}},"reduce":{"name":"reduce","label":"reduce()","id":"reduce()","group":"Reducing a value","signatures":[{"line":5078,"typeParams":["R"],"params":[{"name":"reducer","type":{"k":10,"params":[{"name":"reduction","type":{"k":11,"param":"R"}},{"name":"value","type":"$6:props:def:interface:members:update:signatures:0:params:1:type"},{"name":"key","type":"$6:props:def:interface:members:delete:signatures:0:params:0:type"},{"name":"iter","type":{"k":3}}],"type":{"k":11,"param":"R"}}},{"name":"initialReduction","type":{"k":11,"param":"R"}},{"name":"context","type":{"k":2},"optional":true}],"type":{"k":11,"param":"R"}},{"line":5083,"typeParams":["R"],"params":[{"name":"reducer","type":{"k":10,"params":[{"name":"reduction","type":{"k":13,"types":["$6:props:def:interface:members:update:signatures:0:params:1:type",{"k":11,"param":"R"}]}},{"name":"value","type":"$6:props:def:interface:members:update:signatures:0:params:1:type"},{"name":"key","type":"$6:props:def:interface:members:delete:signatures:0:params:0:type"},{"name":"iter","type":{"k":3}}],"type":{"k":11,"param":"R"}}}],"type":{"k":11,"param":"R"}}],"url":"/docs/latest@main/OrderedMap#reduce()","inherited":{"interface":"Collection","label":"reduce()","url":"/docs/latest@main/Collection#reduce()"}},"reduceRight":{"name":"reduceRight","label":"reduceRight()","id":"reduceRight()","group":"Reducing a value","signatures":[{"line":5093,"typeParams":["R"],"params":[{"name":"reducer","type":{"k":10,"params":[{"name":"reduction","type":{"k":11,"param":"R"}},{"name":"value","type":"$6:props:def:interface:members:update:signatures:0:params:1:type"},{"name":"key","type":"$6:props:def:interface:members:delete:signatures:0:params:0:type"},{"name":"iter","type":{"k":3}}],"type":{"k":11,"param":"R"}}},{"name":"initialReduction","type":{"k":11,"param":"R"}},{"name":"context","type":{"k":2},"optional":true}],"type":{"k":11,"param":"R"}},{"line":5098,"typeParams":["R"],"params":[{"name":"reducer","type":{"k":10,"params":[{"name":"reduction","type":{"k":13,"types":["$6:props:def:interface:members:update:signatures:0:params:1:type",{"k":11,"param":"R"}]}},{"name":"value","type":"$6:props:def:interface:members:update:signatures:0:params:1:type"},{"name":"key","type":"$6:props:def:interface:members:delete:signatures:0:params:0:type"},{"name":"iter","type":{"k":3}}],"type":{"k":11,"param":"R"}}}],"type":{"k":11,"param":"R"}}],"url":"/docs/latest@main/OrderedMap#reduceRight()","inherited":{"interface":"Collection","label":"reduceRight()","url":"/docs/latest@main/Collection#reduceRight()"}},"every":{"name":"every","label":"every()","id":"every()","group":"Reducing a value","doc":{"synopsis":"<p>True if <code><span class=\"t param\">predicate</span></code> returns true for all entries in the Collection.</p>\n","description":"","notes":[]},"signatures":[{"line":5105,"params":[{"name":"predicate","type":{"k":10,"params":[{"name":"value","type":"$6:props:def:interface:members:update:signatures:0:params:1:type"},{"name":"key","type":"$6:props:def:interface:members:delete:signatures:0:params:0:type"},{"name":"iter","type":{"k":3}}],"type":{"k":5}}},{"name":"context","type":{"k":2},"optional":true}],"type":{"k":5}}],"url":"/docs/latest@main/OrderedMap#every()","inherited":{"interface":"Collection","label":"every()","url":"/docs/latest@main/Collection#every()"}},"some":{"name":"some","label":"some()","id":"some()","group":"Reducing a value","doc":{"synopsis":"<p>True if <code><span class=\"t param\">predicate</span></code> returns true for any entry in the Collection.</p>\n","description":"","notes":[]},"signatures":[{"line":5113,"params":[{"name":"predicate","type":{"k":10,"params":[{"name":"value","type":"$6:props:def:interface:members:update:signatures:0:params:1:type"},{"name":"key","type":"$6:props:def:interface:members:delete:signatures:0:params:0:type"},{"name":"iter","type":{"k":3}}],"type":{"k":5}}},{"name":"context","type":{"k":2},"optional":true}],"type":{"k":5}}],"url":"/docs/latest@main/OrderedMap#some()","inherited":{"interface":"Collection","label":"some()","url":"/docs/latest@main/Collection#some()"}},"join":{"name":"join","label":"join()","id":"join()","group":"Reducing a value","doc":{"synopsis":"<p>Joins values together as a string, inserting a separator between each.\nThe default separator is <code><span class=\"token string\">\",\"</span></code>.</p>\n","description":"","notes":[]},"signatures":[{"line":5122,"params":[{"name":"separator","type":{"k":7},"optional":true}],"type":{"k":7}}],"url":"/docs/latest@main/OrderedMap#join()","inherited":{"interface":"Collection","label":"join()","url":"/docs/latest@main/Collection#join()"}},"isEmpty":{"name":"isEmpty","label":"isEmpty()","id":"isEmpty()","group":"Reducing a value","doc":{"synopsis":"<p>Returns true if this Collection includes no values.</p>\n","description":"<p>For some lazy <code><a href=\"/docs/latest@main/Seq\">Seq</a></code>, <code><a href=\"/docs/latest@main/List#isEmpty()\">isEmpty</a></code> might need to iterate to determine\nemptiness. At most one iteration will occur.</p>\n","notes":[]},"signatures":[{"line":5130,"type":{"k":5}}],"url":"/docs/latest@main/OrderedMap#isEmpty()","inherited":{"interface":"Collection","label":"isEmpty()","url":"/docs/latest@main/Collection#isEmpty()"}},"count":{"name":"count","label":"count()","id":"count()","group":"Reducing a value","signatures":[{"line":5142,"type":{"k":6}},{"line":5143,"params":[{"name":"predicate","type":{"k":10,"params":[{"name":"value","type":"$6:props:def:interface:members:update:signatures:0:params:1:type"},{"name":"key","type":"$6:props:def:interface:members:delete:signatures:0:params:0:type"},{"name":"iter","type":{"k":3}}],"type":{"k":5}}},{"name":"context","type":{"k":2},"optional":true}],"type":{"k":6}}],"url":"/docs/latest@main/OrderedMap#count()","inherited":{"interface":"Collection","label":"count()","url":"/docs/latest@main/Collection#count()"}},"countBy":{"name":"countBy","label":"countBy()","id":"countBy()","group":"Reducing a value","doc":{"synopsis":"<p>Returns a <code><a href=\"/docs/latest@main/Seq.Keyed\">Seq.Keyed</a></code> of counts, grouped by the return value of\nthe <code><span class=\"t param\">grouper</span></code> function.</p>\n","description":"<p>Note: This is not a lazy operation.</p>\n","notes":[]},"signatures":[{"line":5154,"typeParams":["G"],"params":[{"name":"grouper","type":{"k":10,"params":[{"name":"value","type":"$6:props:def:interface:members:update:signatures:0:params:1:type"},{"name":"key","type":"$6:props:def:interface:members:delete:signatures:0:params:0:type"},{"name":"iter","type":{"k":3}}],"type":{"k":11,"param":"G"}}},{"name":"context","type":{"k":2},"optional":true}],"type":{"k":12,"name":"Map","args":[{"k":11,"param":"G"},{"k":6}],"url":"/docs/latest@main/Map"}}],"url":"/docs/latest@main/OrderedMap#countBy()","inherited":{"interface":"Collection","label":"countBy()","url":"/docs/latest@main/Collection#countBy()"}},"find":{"name":"find","label":"find()","id":"find()","group":"Search for value","doc":{"synopsis":"<p>Returns the first value for which the <code><span class=\"t param\">predicate</span></code> returns true.</p>\n","description":"","notes":[]},"signatures":[{"line":5164,"params":[{"name":"predicate","type":{"k":10,"params":[{"name":"value","type":"$6:props:def:interface:members:update:signatures:0:params:1:type"},{"name":"key","type":"$6:props:def:interface:members:delete:signatures:0:params:0:type"},{"name":"iter","type":{"k":3}}],"type":{"k":5}}},{"name":"context","type":{"k":2},"optional":true},{"name":"notSetValue","type":"$6:props:def:interface:members:update:signatures:0:params:1:type","optional":true}],"type":{"k":13,"types":["$6:props:def:interface:members:update:signatures:0:params:1:type",{"k":4}]}}],"url":"/docs/latest@main/OrderedMap#find()","inherited":{"interface":"Collection","label":"find()","url":"/docs/latest@main/Collection#find()"}},"findLast":{"name":"findLast","label":"findLast()","id":"findLast()","group":"Search for value","doc":{"synopsis":"<p>Returns the last value for which the <code><span class=\"t param\">predicate</span></code> returns true.</p>\n","description":"<p>Note: <code><span class=\"t param\">predicate</span></code> will be called for each entry in reverse.</p>\n","notes":[]},"signatures":[{"line":5175,"params":[{"name":"predicate","type":{"k":10,"params":[{"name":"value","type":"$6:props:def:interface:members:update:signatures:0:params:1:type"},{"name":"key","type":"$6:props:def:interface:members:delete:signatures:0:params:0:type"},{"name":"iter","type":{"k":3}}],"type":{"k":5}}},{"name":"context","type":{"k":2},"optional":true},{"name":"notSetValue","type":"$6:props:def:interface:members:update:signatures:0:params:1:type","optional":true}],"type":{"k":13,"types":["$6:props:def:interface:members:update:signatures:0:params:1:type",{"k":4}]}}],"url":"/docs/latest@main/OrderedMap#findLast()","inherited":{"interface":"Collection","label":"findLast()","url":"/docs/latest@main/Collection#findLast()"}},"findEntry":{"name":"findEntry","label":"findEntry()","id":"findEntry()","group":"Search for value","doc":{"synopsis":"<p>Returns the first [key, value] entry for which the <code><span class=\"t param\">predicate</span></code> returns true.</p>\n","description":"","notes":[]},"signatures":[{"line":5184,"params":[{"name":"predicate","type":{"k":10,"params":[{"name":"value","type":"$6:props:def:interface:members:update:signatures:0:params:1:type"},{"name":"key","type":"$6:props:def:interface:members:delete:signatures:0:params:0:type"},{"name":"iter","type":{"k":3}}],"type":{"k":5}}},{"name":"context","type":{"k":2},"optional":true},{"name":"notSetValue","type":"$6:props:def:interface:members:update:signatures:0:params:1:type","optional":true}],"type":{"k":13,"types":[{"k":15,"types":["$6:props:def:interface:members:delete:signatures:0:params:0:type","$6:props:def:interface:members:update:signatures:0:params:1:type"]},{"k":4}]}}],"url":"/docs/latest@main/OrderedMap#findEntry()","inherited":{"interface":"Collection","label":"findEntry()","url":"/docs/latest@main/Collection#findEntry()"}},"findLastEntry":{"name":"findLastEntry","label":"findLastEntry()","id":"findLastEntry()","group":"Search for value","doc":{"synopsis":"<p>Returns the last [key, value] entry for which the <code><span class=\"t param\">predicate</span></code>\nreturns true.</p>\n","description":"<p>Note: <code><span class=\"t param\">predicate</span></code> will be called for each entry in reverse.</p>\n","notes":[]},"signatures":[{"line":5196,"params":[{"name":"predicate","type":{"k":10,"params":[{"name":"value","type":"$6:props:def:interface:members:update:signatures:0:params:1:type"},{"name":"key","type":"$6:props:def:interface:members:delete:signatures:0:params:0:type"},{"name":"iter","type":{"k":3}}],"type":{"k":5}}},{"name":"context","type":{"k":2},"optional":true},{"name":"notSetValue","type":"$6:props:def:interface:members:update:signatures:0:params:1:type","optional":true}],"type":{"k":13,"types":[{"k":15,"types":["$6:props:def:interface:members:delete:signatures:0:params:0:type","$6:props:def:interface:members:update:signatures:0:params:1:type"]},{"k":4}]}}],"url":"/docs/latest@main/OrderedMap#findLastEntry()","inherited":{"interface":"Collection","label":"findLastEntry()","url":"/docs/latest@main/Collection#findLastEntry()"}},"findKey":{"name":"findKey","label":"findKey()","id":"findKey()","group":"Search for value","doc":{"synopsis":"<p>Returns the key for which the <code><span class=\"t param\">predicate</span></code> returns true.</p>\n","description":"","notes":[]},"signatures":[{"line":5205,"params":[{"name":"predicate","type":{"k":10,"params":[{"name":"value","type":"$6:props:def:interface:members:update:signatures:0:params:1:type"},{"name":"key","type":"$6:props:def:interface:members:delete:signatures:0:params:0:type"},{"name":"iter","type":{"k":3}}],"type":{"k":5}}},{"name":"context","type":{"k":2},"optional":true}],"type":{"k":13,"types":["$6:props:def:interface:members:delete:signatures:0:params:0:type",{"k":4}]}}],"url":"/docs/latest@main/OrderedMap#findKey()","inherited":{"interface":"Collection","label":"findKey()","url":"/docs/latest@main/Collection#findKey()"}},"findLastKey":{"name":"findLastKey","label":"findLastKey()","id":"findLastKey()","group":"Search for value","doc":{"synopsis":"<p>Returns the last key for which the <code><span class=\"t param\">predicate</span></code> returns true.</p>\n","description":"<p>Note: <code><span class=\"t param\">predicate</span></code> will be called for each entry in reverse.</p>\n","notes":[]},"signatures":[{"line":5215,"params":[{"name":"predicate","type":{"k":10,"params":[{"name":"value","type":"$6:props:def:interface:members:update:signatures:0:params:1:type"},{"name":"key","type":"$6:props:def:interface:members:delete:signatures:0:params:0:type"},{"name":"iter","type":{"k":3}}],"type":{"k":5}}},{"name":"context","type":{"k":2},"optional":true}],"type":{"k":13,"types":["$6:props:def:interface:members:delete:signatures:0:params:0:type",{"k":4}]}}],"url":"/docs/latest@main/OrderedMap#findLastKey()","inherited":{"interface":"Collection","label":"findLastKey()","url":"/docs/latest@main/Collection#findLastKey()"}},"keyOf":{"name":"keyOf","label":"keyOf()","id":"keyOf()","group":"Search for value","doc":{"synopsis":"<p>Returns the key associated with the search value, or undefined.</p>\n","description":"","notes":[]},"signatures":[{"line":5223,"params":[{"name":"searchValue","type":"$6:props:def:interface:members:update:signatures:0:params:1:type"}],"type":{"k":13,"types":["$6:props:def:interface:members:delete:signatures:0:params:0:type",{"k":4}]}}],"url":"/docs/latest@main/OrderedMap#keyOf()","inherited":{"interface":"Collection","label":"keyOf()","url":"/docs/latest@main/Collection#keyOf()"}},"lastKeyOf":{"name":"lastKeyOf","label":"lastKeyOf()","id":"lastKeyOf()","group":"Search for value","doc":{"synopsis":"<p>Returns the last key associated with the search value, or undefined.</p>\n","description":"","notes":[]},"signatures":[{"line":5228,"params":[{"name":"searchValue","type":"$6:props:def:interface:members:update:signatures:0:params:1:type"}],"type":{"k":13,"types":["$6:props:def:interface:members:delete:signatures:0:params:0:type",{"k":4}]}}],"url":"/docs/latest@main/OrderedMap#lastKeyOf()","inherited":{"interface":"Collection","label":"lastKeyOf()","url":"/docs/latest@main/Collection#lastKeyOf()"}},"max":{"name":"max","label":"max()","id":"max()","group":"Search for value","doc":{"synopsis":"<p>Returns the maximum value in this collection. If any values are\ncomparatively equivalent, the first one found will be returned.</p>\n","description":"<p>The <code><span class=\"t param\">comparator</span></code> is used in the same way as <code><a href=\"/docs/latest@main/Collection#sort()\">Collection#sort</a></code>. If it is not\nprovided, the default comparator is <code><span class=\"token operator\">></span></code>.</p>\n<p>When two values are considered equivalent, the first encountered will be\nreturned. Otherwise, <code><a href=\"/docs/latest@main/List#max()\">max</a></code> will operate independent of the order of input\nas long as the comparator is commutative. The default comparator <code><span class=\"token operator\">></span></code> is\ncommutative <em>only</em> when types do not differ.</p>\n<p>If <code><span class=\"t param\">comparator</span></code> returns 0 and either value is NaN, undefined, or null,\nthat value will be returned.</p>\n","notes":[]},"signatures":[{"line":5245,"params":[{"name":"comparator","type":{"k":12,"name":"Comparator","args":["$6:props:def:interface:members:update:signatures:0:params:1:type"]},"optional":true}],"type":{"k":13,"types":["$6:props:def:interface:members:update:signatures:0:params:1:type",{"k":4}]}}],"url":"/docs/latest@main/OrderedMap#max()","inherited":{"interface":"Collection","label":"max()","url":"/docs/latest@main/Collection#max()"}},"maxBy":{"name":"maxBy","label":"maxBy()","id":"maxBy()","group":"Search for value","doc":{"synopsis":"<p>Like <code><a href=\"/docs/latest@main/List#max()\">max</a></code>, but also accepts a <code><span class=\"t param\">comparatorValueMapper</span></code> which allows for\ncomparing by more sophisticated means:</p>\n","description":"$2a","notes":[]},"signatures":[{"line":5262,"typeParams":["C"],"params":[{"name":"comparatorValueMapper","type":{"k":10,"params":[{"name":"value","type":"$6:props:def:interface:members:update:signatures:0:params:1:type"},{"name":"key","type":"$6:props:def:interface:members:delete:signatures:0:params:0:type"},{"name":"iter","type":{"k":3}}],"type":{"k":11,"param":"C"}}},{"name":"comparator","type":{"k":12,"name":"Comparator","args":[{"k":11,"param":"C"}]},"optional":true}],"type":{"k":13,"types":["$6:props:def:interface:members:update:signatures:0:params:1:type",{"k":4}]}}],"url":"/docs/latest@main/OrderedMap#maxBy()","inherited":{"interface":"Collection","label":"maxBy()","url":"/docs/latest@main/Collection#maxBy()"}},"min":{"name":"min","label":"min()","id":"min()","group":"Search for value","doc":{"synopsis":"<p>Returns the minimum value in this collection. If any values are\ncomparatively equivalent, the first one found will be returned.</p>\n","description":"<p>The <code><span class=\"t param\">comparator</span></code> is used in the same way as <code><a href=\"/docs/latest@main/Collection#sort()\">Collection#sort</a></code>. If it is not\nprovided, the default comparator is <code><span class=\"token operator\">&lt;</span></code>.</p>\n<p>When two values are considered equivalent, the first encountered will be\nreturned. Otherwise, <code><a href=\"/docs/latest@main/List#min()\">min</a></code> will operate independent of the order of input\nas long as the comparator is commutative. The default comparator <code><span class=\"token operator\">&lt;</span></code> is\ncommutative <em>only</em> when types do not differ.</p>\n<p>If <code><span class=\"t param\">comparator</span></code> returns 0 and either value is NaN, undefined, or null,\nthat value will be returned.</p>\n","notes":[]},"signatures":[{"line":5282,"params":[{"name":"comparator","type":{"k":12,"name":"Comparator","args":["$6:props:def:interface:members:update:signatures:0:params:1:type"]},"optional":true}],"type":{"k":13,"types":["$6:props:def:interface:members:update:signatures:0:params:1:type",{"k":4}]}}],"url":"/docs/latest@main/OrderedMap#min()","inherited":{"interface":"Collection","label":"min()","url":"/docs/latest@main/Collection#min()"}},"minBy":{"name":"minBy","label":"minBy()","id":"minBy()","group":"Search for value","doc":{"synopsis":"<p>Like <code><a href=\"/docs/latest@main/List#min()\">min</a></code>, but also accepts a <code><span class=\"t param\">comparatorValueMapper</span></code> which allows for\ncomparing by more sophisticated means:</p>\n","description":"$2b","notes":[]},"signatures":[{"line":5299,"typeParams":["C"],"params":[{"name":"comparatorValueMapper","type":{"k":10,"params":[{"name":"value","type":"$6:props:def:interface:members:update:signatures:0:params:1:type"},{"name":"key","type":"$6:props:def:interface:members:delete:signatures:0:params:0:type"},{"name":"iter","type":{"k":3}}],"type":{"k":11,"param":"C"}}},{"name":"comparator","type":{"k":12,"name":"Comparator","args":[{"k":11,"param":"C"}]},"optional":true}],"type":{"k":13,"types":["$6:props:def:interface:members:update:signatures:0:params:1:type",{"k":4}]}}],"url":"/docs/latest@main/OrderedMap#minBy()","inherited":{"interface":"Collection","label":"minBy()","url":"/docs/latest@main/Collection#minBy()"}},"isSubset":{"name":"isSubset","label":"isSubset()","id":"isSubset()","group":"Comparison","doc":{"synopsis":"<p>True if <code><span class=\"t param\">iter</span></code> includes every value in this Collection.</p>\n","description":"","notes":[]},"signatures":[{"line":5309,"params":[{"name":"iter","type":{"k":12,"name":"Iterable","args":["$6:props:def:interface:members:update:signatures:0:params:1:type"]}}],"type":{"k":5}}],"url":"/docs/latest@main/OrderedMap#isSubset()","inherited":{"interface":"Collection","label":"isSubset()","url":"/docs/latest@main/Collection#isSubset()"}},"isSuperset":{"name":"isSuperset","label":"isSuperset()","id":"isSuperset()","group":"Comparison","doc":{"synopsis":"<p>True if this Collection includes every value in <code><span class=\"t param\">iter</span></code>.</p>\n","description":"","notes":[]},"signatures":[{"line":5314,"params":[{"name":"iter","type":{"k":12,"name":"Iterable","args":["$6:props:def:interface:members:update:signatures:0:params:1:type"]}}],"type":{"k":5}}],"url":"/docs/latest@main/OrderedMap#isSuperset()","inherited":{"interface":"Collection","label":"isSuperset()","url":"/docs/latest@main/Collection#isSuperset()"}}},"line":1722,"typeParams":["K","V"],"extends":[{"k":12,"name":"Map","args":["$6:props:def:interface:members:delete:signatures:0:params:0:type","$6:props:def:interface:members:update:signatures:0:params:1:type"],"url":"/docs/latest@main/Map"},{"k":12,"name":"OrderedCollection","args":[{"k":15,"types":[{"k":11,"param":"K"},{"k":11,"param":"V"}]}],"url":"/docs/latest@main/OrderedCollection"}]},"label":"OrderedMap","url":"/docs/latest@main/OrderedMap"},"sidebarLinks":[{"label":"List","url":"/docs/latest@main/List"},{"label":"Map","url":"/docs/latest@main/Map"},{"label":"OrderedMap","url":"/docs/latest@main/OrderedMap"},{"label":"Set","url":"/docs/latest@main/Set"},{"label":"OrderedSet","url":"/docs/latest@main/OrderedSet"},{"label":"Stack","url":"/docs/latest@main/Stack"},{"label":"Range()","url":"/docs/latest@main/Range()"},{"label":"Repeat()","url":"/docs/latest@main/Repeat()"},{"label":"Record","url":"/docs/latest@main/Record"},{"label":"Record.Factory","url":"/docs/latest@main/Record.Factory"},{"label":"Seq","url":"/docs/latest@main/Seq"},{"label":"Seq.Keyed","url":"/docs/latest@main/Seq.Keyed"},{"label":"Seq.Indexed","url":"/docs/latest@main/Seq.Indexed"},{"label":"Seq.Set","url":"/docs/latest@main/Seq.Set"},{"label":"Collection","url":"/docs/latest@main/Collection"},{"label":"Collection.Keyed","url":"/docs/latest@main/Collection.Keyed"},{"label":"Collection.Indexed","url":"/docs/latest@main/Collection.Indexed"},{"label":"Collection.Set","url":"/docs/latest@main/Collection.Set"},{"label":"ValueObject","url":"/docs/latest@main/ValueObject"},{"label":"OrderedCollection","url":"/docs/latest@main/OrderedCollection"},{"label":"fromJS()","url":"/docs/latest@main/fromJS()"},{"label":"is()","url":"/docs/latest@main/is()"},{"label":"hash()","url":"/docs/latest@main/hash()"},{"label":"isImmutable()","url":"/docs/latest@main/isImmutable()"},{"label":"isCollection()","url":"/docs/latest@main/isCollection()"},{"label":"isKeyed()","url":"/docs/latest@main/isKeyed()"},{"label":"isIndexed()","url":"/docs/latest@main/isIndexed()"},{"label":"isAssociative()","url":"/docs/latest@main/isAssociative()"},{"label":"isOrdered()","url":"/docs/latest@main/isOrdered()"},{"label":"isValueObject()","url":"/docs/latest@main/isValueObject()"},{"label":"isSeq()","url":"/docs/latest@main/isSeq()"},{"label":"isList()","url":"/docs/latest@main/isList()"},{"label":"isMap()","url":"/docs/latest@main/isMap()"},{"label":"isOrderedMap()","url":"/docs/latest@main/isOrderedMap()"},{"label":"isStack()","url":"/docs/latest@main/isStack()"},{"label":"isSet()","url":"/docs/latest@main/isSet()"},{"label":"isOrderedSet()","url":"/docs/latest@main/isOrderedSet()"},{"label":"isRecord()","url":"/docs/latest@main/isRecord()"},{"label":"get()","url":"/docs/latest@main/get()"},{"label":"has()","url":"/docs/latest@main/has()"},{"label":"remove()","url":"/docs/latest@main/remove()"},{"label":"set()","url":"/docs/latest@main/set()"},{"label":"update()","url":"/docs/latest@main/update()"},{"label":"getIn()","url":"/docs/latest@main/getIn()"},{"label":"hasIn()","url":"/docs/latest@main/hasIn()"},{"label":"removeIn()","url":"/docs/latest@main/removeIn()"},{"label":"setIn()","url":"/docs/latest@main/setIn()"},{"label":"updateIn()","url":"/docs/latest@main/updateIn()"},{"label":"merge()","url":"/docs/latest@main/merge()"},{"label":"mergeWith()","url":"/docs/latest@main/mergeWith()"},{"label":"mergeDeep()","url":"/docs/latest@main/mergeDeep()"},{"label":"mergeDeepWith()","url":"/docs/latest@main/mergeDeepWith()"}]}]
b:[["$","meta","0",{"charSet":"utf-8"}],["$","meta","1",{"name":"viewport","content":"width=device-width, initial-scale=1"}]]
8:null
9:null
d:[["$","title","0",{"children":"OrderedMap — Immutable.js"}],["$","link","1",{"rel":"icon","href":"/favicon.png"}]]
