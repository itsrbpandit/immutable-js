{"version":3,"sources":["turbopack:///[project]/website/src/worker/jsonml-types.ts","turbopack:///[project]/website/src/worker/normalizeResult.ts","turbopack:///[project]/website/src/worker/index.ts"],"sourcesContent":["/**\n * TypeScript types representing a JsonML grammar\n *\n * This represents a JSON-based markup language where elements are represented as arrays:\n * - First element is the tag name\n * - Second element (optional) is an attributes object\n * - Remaining elements are children\n */\n\n// Basic types\ntype TagName = string;\ntype AttributeName = string;\ntype AttributeValue = string | number | boolean | null | object;\n\n// Attributes\n// type Attribute = [AttributeName, AttributeValue];\n// type AttributeList = Attribute[];\nexport type Attributes = Record<AttributeName, AttributeValue>;\n\ntype ElementWithAttributes =\n  | [TagName, Attributes, ...Element[]] // [tag-name, attributes, element-list]\n  | [TagName, Attributes]; // [tag-name, attributes]\n\n// Elements\nexport type Element =\n  | ElementWithAttributes\n  | [TagName, ...Element[]] // [tag-name, element-list]\n  | [TagName] // [tag-name]\n  | string; // string\n\n// Element list is just a list of elements\nexport type JsonMLElementList = Array<Element | JsonMLElementList>;\n\nexport function isElement(maybeElement: unknown): maybeElement is Element {\n  return (\n    typeof maybeElement === 'string' ||\n    (Array.isArray(maybeElement) &&\n      maybeElement.length >= 1 &&\n      typeof maybeElement[0] === 'string')\n  );\n}\n\nfunction hasAttributes(\n  maybeElementWithAttributes: Element\n): maybeElementWithAttributes is ElementWithAttributes {\n  return (\n    Array.isArray(maybeElementWithAttributes) &&\n    typeof maybeElementWithAttributes[1] === 'object' &&\n    !Array.isArray(maybeElementWithAttributes[1])\n  );\n}\n\ntype ExplodedElement = {\n  tagName: TagName;\n  attributes?: Attributes;\n  children: Element[];\n};\n\nexport function explodeElement(element: Element): ExplodedElement {\n  if (typeof element === 'string') {\n    return { tagName: element, children: [] };\n  }\n\n  if (hasAttributes(element)) {\n    const [tagName, attributes, ...children] = element;\n\n    return { tagName, attributes, children };\n  }\n\n  const [tagName, attributes, ...children] = element;\n\n  return {\n    tagName,\n    children: [attributes, ...children].filter(isElement),\n  };\n}\n","import {\n  Element,\n  explodeElement,\n  isElement,\n  JsonMLElementList,\n} from './jsonml-types';\n\nexport interface DevToolsFormatter {\n  header: (obj: unknown) => JsonMLElementList | null;\n  hasBody: (obj: unknown) => boolean;\n  body: (obj: unknown) => JsonMLElementList | null;\n}\n\nfunction getFormatter(\n  immutableFormaters: Array<DevToolsFormatter>,\n  result: unknown\n) {\n  return immutableFormaters.find((formatter) => formatter.header(result));\n}\n\nexport default function normalizeResult(\n  immutableFormaters: Array<DevToolsFormatter>,\n  result: unknown\n): JsonMLElementList | Element {\n  const formatter = getFormatter(immutableFormaters, result);\n\n  if (!formatter) {\n    if (Array.isArray(result) && result[0] === 'object' && result[1]?.object) {\n      // handle special case for deep objects\n      const objectFormatter = getFormatter(\n        immutableFormaters,\n        result[1].object\n      );\n\n      if (objectFormatter) {\n        return normalizeResult(immutableFormaters, result[1].object);\n      }\n    }\n\n    if (typeof result !== 'string' && isElement(result)) {\n      return normalizeElement(immutableFormaters, result);\n    }\n\n    if (typeof result === 'string') {\n      return result;\n    }\n\n    return JSON.stringify(result);\n  }\n\n  const header = formatter.header(result) ?? [];\n\n  let body: JsonMLElementList | null = formatter.hasBody(result)\n    ? formatter.body(result)\n    : null;\n\n  if (body) {\n    body = body.map((item) => normalizeElement(immutableFormaters, item));\n  }\n\n  if (!body) {\n    return ['span', header];\n  }\n\n  return ['span', header, body];\n}\n\nfunction normalizeElement(\n  immutableFormaters: Array<DevToolsFormatter>,\n  item: Element | JsonMLElementList\n): Element | JsonMLElementList {\n  if (!Array.isArray(item)) {\n    return item;\n  }\n\n  if (!isElement(item)) {\n    return item;\n  }\n\n  const explodedItem = explodeElement(item);\n\n  const { tagName, attributes, children } = explodedItem;\n\n  const normalizedChildren = children.map((child) =>\n    normalizeResult(immutableFormaters, child)\n  );\n\n  if (attributes) {\n    // @ts-expect-error type is not perfect here because of self-reference\n    return [tagName, attributes, ...normalizedChildren];\n  }\n\n  return [tagName, ...normalizedChildren];\n}\n","/// <reference lib=\"webworker\" />\nimport type * as ImmutableModule from '../../../type-definitions/immutable.js';\nimport normalizeResult, { DevToolsFormatter } from './normalizeResult';\n\n// Declare Immutable and immutableDevTools as they come from external scripts\ndeclare const Immutable: typeof ImmutableModule;\n\ndeclare function immutableDevTools(immutable: typeof ImmutableModule): void;\n\n// Declare globalThis.devtoolsFormatters\ndeclare global {\n  // eslint-disable-next-line no-var\n  var devtoolsFormatters: DevToolsFormatter[];\n}\n\nimportScripts(\n  'https://cdn.jsdelivr.net/npm/immutable@5.1.1',\n  'https://cdn.jsdelivr.net/npm/@jdeniau/immutable-devtools@0.2.0'\n);\n\n// extract all Immutable exports to have them available in the worker automatically\n/* eslint-disable @typescript-eslint/no-unused-vars */\nconst {\n  // @ts-expect-error type is not exported but runtime is OK\n  version,\n  Collection,\n  // @ts-expect-error type is not exported but runtime is OK\n  // Note: Iterable is deprecated, alias for Collection\n  Iterable,\n  Seq,\n  Map,\n  OrderedMap,\n  List,\n  Stack,\n  Set,\n  OrderedSet,\n  PairSorting,\n  Record,\n  Range,\n  Repeat,\n  is,\n  fromJS,\n  hash,\n  isImmutable,\n  isCollection,\n  isKeyed,\n  isIndexed,\n  isAssociative,\n  isOrdered,\n  // @ts-expect-error type is not exported but runtime is OK\n  isPlainObject,\n  isValueObject,\n  isSeq,\n  isList,\n  isMap,\n  isOrderedMap,\n  isStack,\n  isSet,\n  isOrderedSet,\n  isRecord,\n  get,\n  getIn,\n  has,\n  hasIn,\n  merge,\n  mergeDeep,\n  mergeWith,\n  mergeDeepWith,\n  remove,\n  removeIn,\n  set,\n  setIn,\n  update,\n  updateIn,\n} = Immutable;\n/* eslint-enable @typescript-eslint/no-unused-vars */\n\nimmutableDevTools(Immutable);\n\n// hack to get the formatters from immutable-devtools as they are not exported, but they modify the \"global\" variable\nconst immutableFormaters = globalThis.devtoolsFormatters;\n\nself.onmessage = function (event: {\n  data: { code: string; key: string };\n}): void {\n  const { code, key } = event.data;\n\n  const timeoutId = setTimeout(() => {\n    self.postMessage({ key, error: 'Execution timed out' });\n    self.close();\n  }, 2000);\n\n  try {\n    // track globalThis variables to remove them later\n\n    // if (!globalThis.globalThisKeysBefore) {\n    //   globalThis.globalThisKeysBefore = [...Object.keys(globalThis)];\n    // }\n\n    // track const and let variables into global scope to record them\n\n    // it might make a userland code fail with a conflict.\n\n    // We might want to indicate the user in the REPL that they should not use let/const if they want to have the result returned\n\n    // code = code.replace(/^(const|let|var) /gm, '');\n\n    const result = eval(code);\n\n    // const globalThisKeys = Object.keys(globalThis).filter((key) => {\n\n    //   return !globalThisKeysBefore.includes(key) && key !== 'globalThisKeysBefore';\n\n    // });\n\n    // console.log(globalThisKeys)\n\n    clearTimeout(timeoutId);\n\n    // TODO handle more than one result\n\n    // if (!result) {\n\n    //   // result = globalThis[globalThisKeys[0]];\n\n    //   result = globalThisKeys.map((key) => {\n\n    //     globalThis[key];\n\n    //   });\n\n    // }\n\n    self.postMessage({\n      key,\n      output: normalizeResult(immutableFormaters, result),\n    });\n  } catch (error) {\n    console.log(error);\n    clearTimeout(timeoutId);\n    self.postMessage({ key, error: String(error) });\n  }\n};\n"],"names":[],"mappings":"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"}