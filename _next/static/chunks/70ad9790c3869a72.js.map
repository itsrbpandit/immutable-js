{"version":3,"sources":["turbopack:///[project]/website/src/app/WorkerContext.tsx","turbopack:///[project]/node_modules/next/src/shared/lib/utils/warn-once.ts"],"sourcesContent":["'use client';\nimport { Element, JsonMLElementList } from '../worker/jsonml-types';\nimport React, {\n  createContext,\n  JSX,\n  useCallback,\n  useEffect,\n  useMemo,\n  useRef,\n  useState,\n} from 'react';\n\ntype Props = {\n  children: React.ReactNode;\n};\n\ntype OnSuccessType = (result: JsonMLElementList | Element) => void;\n\ntype WorkerContextType = {\n  runCode: (code: string, onSuccess: OnSuccessType) => void;\n};\n\nconst WorkerContext = createContext<null | WorkerContextType>(null);\n\nexport function useWorkerContext() {\n  const context = React.useContext(WorkerContext);\n\n  if (!context) {\n    throw new Error('useWorkerContext must be used within a WorkerProvider');\n  }\n\n  return context;\n}\n\nexport function WorkerContextProvider({ children }: Props): JSX.Element {\n  const workerRef = useRef<Worker | null>(null);\n  const [successMap, setSuccessMap] = useState<Map<string, OnSuccessType>>(\n    new Map()\n  );\n\n  useEffect(() => {\n    // Create a worker from the external worker.js file\n    workerRef.current = new Worker(\n      new URL('../worker/index.ts', import.meta.url),\n      { type: 'module' }\n    );\n\n    workerRef.current.onmessage = (event: {\n      data: {\n        key: string;\n        output: JsonMLElementList | Element;\n        error?: string;\n      };\n    }) => {\n      const onSuccess = successMap.get(event.data.key);\n\n      if (!onSuccess) {\n        console.warn(\n          `No success handler found for key: ${event.data.key}. This is an issue with the single REPL worker.`\n        );\n\n        return;\n      }\n\n      if (event.data.error) {\n        onSuccess(['div', 'Error: ' + event.data.error]);\n      } else {\n        const { output } = event.data;\n\n        if (typeof output === 'object' && !Array.isArray(output)) {\n          onSuccess(['div', { object: output }]);\n        } else {\n          onSuccess(output);\n        }\n      }\n    };\n\n    return () => {\n      workerRef.current?.terminate();\n    };\n  }, []);\n\n  const runCode = useCallback(\n    (code: string, onSuccess: OnSuccessType): void => {\n      const key = Math.random().toString(36).substring(2, 15);\n\n      setSuccessMap((successMap) => successMap.set(key, onSuccess));\n\n      // ignore import statements as we do unpack all immutable data in the worker\n      // but it might be useful in the documentation\n      const cleanedCode = code; // .replace(/^import.*/m, '');\n\n      // send message to worker\n      if (workerRef.current) {\n        workerRef.current.postMessage({ code: cleanedCode, key });\n      }\n    },\n    []\n  );\n\n  const value = useMemo(\n    () => ({\n      runCode,\n    }),\n    [runCode]\n  );\n\n  return (\n    <WorkerContext.Provider value={value}>{children}</WorkerContext.Provider>\n  );\n}\n","let warnOnce = (_: string) => {}\nif (process.env.NODE_ENV !== 'production') {\n  const warnings = new Set<string>()\n  warnOnce = (msg: string) => {\n    if (!warnings.has(msg)) {\n      console.warn(msg)\n    }\n    warnings.add(msg)\n  }\n}\n\nexport { warnOnce }\n"],"names":["process","env","NODE_ENV","warnOnce","_"],"mappings":"6aAEA,EAAA,EAAA,CAAA,CAAA,OAoBA,IAAM,EAAgB,CAAA,EAAA,EAAA,aAAA,AAAY,EAA4B,MAEvD,SAAS,IACd,EAHoB,EAGd,EAAU,EAAA,OAAK,CAAC,UAAU,CAAC,GAEjC,GAAI,CAAC,EACH,MAAM,AAAI,CADE,CAFE,IAGE,yDAGlB,OAAO,CACT,CAEO,SAAS,EAAsB,UAAE,CAAQ,CAAS,EACvD,IAAM,EAAY,CAAA,EAAA,EAAA,MAAA,AAAK,EAAiB,MAClC,CAAC,EAAY,EAAc,CAAG,CAAA,EAAA,EAAA,QAAA,AAAO,EACzC,CAFgB,GAEZ,KAGN,CAAA,EAAA,EAAA,SAAA,AAAQ,EAAE,CAJ0B,IAMlC,EAAU,OAAO,CAAG,IAAI,MAF1B,CAE0B,EAAA,CAAA,CAAA,SAAA,CAEpB,KAAM,uBAGV,EAAU,OAAO,CAAC,SAAS,CAAG,AAAC,IAO7B,IAAM,EAAY,EAAW,GAAG,CAAC,EAAM,IAAI,CAAC,GAAG,EAE/C,GAAI,CAAC,EAAW,YACd,QAAQ,IAAI,CACV,CAAC,kCAAkC,EAAE,EAAM,IAAI,CAAC,GAAG,CAAC,+CAA+C,CAAC,EAMxG,GAAI,EAAM,IAAI,CAAC,KAAK,CAClB,CADoB,CACV,CAAC,MAAO,UAAY,EAAM,IAAI,CAAC,KAAK,CAAC,MAC1C,CACL,GAAM,QAAE,CAAM,CAAE,CAAG,EAAM,IAAI,CAK3B,EAHoB,UAAlB,EAA8B,KAAvB,GAAwB,MAAM,OAAO,CAAC,GAGrC,EAFA,CAAC,GAD6C,GACtC,CAAE,OAAQ,CAAO,EAAE,CAIzC,CACF,EAEO,KACL,EAAU,OAAO,EAAE,WACrB,GACC,EAAE,EAEL,IAAM,EAAU,CAAA,EAAA,EAAA,WAAU,AAAV,EACd,CAAC,EAAc,KACb,IAAM,EAAM,KAAK,IAFL,EAEW,GAAG,QAAQ,CAAC,IAAI,SAAS,CAAC,EAAG,IAEpD,EAAc,AAAC,GAAe,EAAW,GAAG,CAAC,EAAK,IAO9C,EAAU,OAAO,EACnB,AADqB,EACX,OAAO,CAAC,WAAW,CAAC,CAAE,KAJd,CAIoB,KAAa,AAJ3B,CAI+B,EAE3D,EACA,EAAE,EAGE,EAAQ,CAAA,EAAA,EAAA,OAAA,AAAM,EAClB,IAAM,CAXoD,AAWnD,CACL,UACF,CAAC,CACD,CAAC,EAAQ,EAGX,IAPc,EAQZ,CAAA,EAAA,EAAA,GAAA,EAAC,EAAc,QAAQ,CAAA,CAAC,MAAO,WAAQ,GAE3C,mEC7G6B,EAAA,CAAA,CAAA,gFAUpBG,WAAAA,qCAAAA,KAXT,IAAIA,EAAW,AAACC,IAAe","ignoreList":[1]}